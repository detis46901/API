{"version":3,"sources":["modules/users/services/authenticate-service.ts"],"names":[],"mappings":";AACA,IAAO,SAAS,WAAW,uBAAuB,CAAC,CAAC;AAGpD;IAAA;IAsDA,CAAC;IApDG,6BAAO,GAAP,UAAQ,KAAa,EAAE,QAAgB;QAEnC,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,IAAI;aACP;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;YAClB,WAAW,CAAC,KAAK,GAAG;gBAChB,IAAI,EAAE;oBACF,EAAE,QAAQ,EAAE,KAAG,QAAU,EAAE;oBAC3B,EAAE,KAAK,EAAE,KAAG,KAAO,EAAE;iBACxB;aACJ,CAAA;QACL,CAAC;QACD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAChD,CAAC;IAED,yBAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED,8BAAQ,GAAR,UAAS,KAAa;QAClB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED,4BAAM,GAAN,UAAO,OAAiB;QACpB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,4BAAM,GAAN,UAAO,OAAiB;QAEpB,MAAM,CAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,YAAY;YAEhE,YAAY,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YAC3C,YAAY,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YACzC,YAAY,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAErC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,4BAAM,GAAN,UAAO,KAAa;QAEhB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,YAAY;YAErD,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QAElC,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,kBAAC;AAAD,CAtDA,AAsDC,IAAA;AAED,iBAAS,WAAW,CAAC","file":"../../../../modules/users/services/authenticate-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport UserModel = require('../models/users-model');\r\n\r\n\r\nclass UserService {\r\n\r\n    getList(email: string, password: string): Promise<UserModel.UserInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (email, password) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    { password: `${password}` } ,\r\n                    { email: `${email}` },\r\n                ]\r\n            }\r\n        }\r\n        return UserModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<UserModel.UserInstance> {\r\n        return UserModel.Model.findById(rowID);\r\n    }   \r\n\r\n    getemail(email: string): Promise<UserModel.UserInstance> {\r\n        return UserModel.Model.findById(email);\r\n    }\r\n    \r\n    create(request: App.User): Promise<UserModel.UserInstance> {\r\n        return UserModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.User): Promise<UserModel.UserInstance> {\r\n        \r\n        return <any>(UserModel.Model.findById(request.ID).then((UserInstance) => {\r\n\r\n            UserInstance.firstName = request.firstName;\r\n            UserInstance.lastName = request.lastName;\r\n            UserInstance.roleID = request.roleID;\r\n\r\n            return UserInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(rowID: number) {\r\n\r\n        return UserModel.Model.findById(rowID).then((UserInstance) => {\r\n\r\n            return UserInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = UserService;"]}