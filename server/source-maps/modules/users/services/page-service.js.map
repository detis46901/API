{"version":3,"sources":["modules/users/services/page-service.ts"],"names":[],"mappings":"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","file":"../../../../modules/users/services/page-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport PageModel = require('../models/page-model');\r\n\r\n\r\nclass PageService {\r\n\r\n    getList(userID: number): Promise<PageModel.PageInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'pageOrder'\r\n            ]\r\n        };\r\n\r\n        if (userID) {\r\n            findOptions.where = {\r\n                [Sequelize.Op.and]: [\r\n                    { userID: userID}\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return PageModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    getActiveByUserID(userID: number): Promise<PageModel.PageInstance[]> {\r\n        \r\n                var findOptions: Sequelize.FindOptions = {\r\n                    order: [\r\n                        'pageOrder'\r\n                    ]\r\n                };\r\n        \r\n                if (userID) {\r\n                    findOptions.where = {\r\n                        [Sequelize.Op.and]: [\r\n                            { userID: userID},\r\n                            { active: true}\r\n                        ]\r\n                    }\r\n                }\r\n                console.log(userID)\r\n                return PageModel.Model.findAll(findOptions);\r\n            }\r\n        \r\n    getDefault(userID: number): Promise<PageModel.PageInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'userID'\r\n            ]\r\n        };\r\n\r\n        if (userID) {\r\n            findOptions.where = {\r\n                [Sequelize.Op.and]: [\r\n                    { userID: userID},\r\n                    { default: true}\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return PageModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<PageModel.PageInstance> {\r\n        return PageModel.Model.findByPk(rowID);\r\n    }\r\n\r\n    create(request: App.UserPage): Promise<PageModel.PageInstance> {\r\n        return PageModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.UserPage): Promise<PageModel.PageInstance> {\r\n        \r\n        return <any>(PageModel.Model.findByPk(request.ID).then((PageInstance) => {\r\n\r\n            PageInstance.userID = request.userID;\r\n            PageInstance.page = request.page;\r\n            PageInstance.pageOrder = request.pageOrder;\r\n            PageInstance.default = request.default;\r\n            PageInstance.active = request.active;\r\n\r\n            return PageInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n\r\n        return PageModel.Model.findByPk(ID).then((PageInstance) => {\r\n\r\n            return PageInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = PageService;"]}