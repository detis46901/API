{"version":3,"sources":["modules/users/services/group-member-service.ts"],"names":[],"mappings":";AACA,IAAO,gBAAgB,WAAW,8BAA8B,CAAC,CAAC;AAClE,IAAO,SAAS,WAAW,sBAAsB,CAAC,CAAC;AACnD,IAAO,UAAU,WAAW,uBAAuB,CAAC,CAAC;AAErD;IAAA;IA0DA,CAAC;IAzDG,oCAAO,GAAP,UAAQ,WAAmB;QACvB,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAC;IAED,sCAAS,GAAT,UAAU,MAAc;QAEpB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,IAAI;aACP;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACT,WAAW,CAAC,KAAK,GAAG;gBAChB,IAAI,EAAE;oBACF,EAAE,MAAM,EAAE,MAAM,EAAE;iBACrB;aACJ,CAAA;QACL,CAAC;QAED,WAAW,CAAC,OAAO,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;QACxC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACvD,CAAC;IAED,uCAAU,GAAV,UAAW,OAAe;QACtB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QACpB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,IAAI;aACP;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,WAAW,CAAC,KAAK,GAAG;gBAChB,IAAI,EAAE;oBACF,EAAE,OAAO,EAAE,OAAO,EAAE;iBACvB;aACJ,CAAA;QACL,CAAC;QAED,WAAW,CAAC,OAAO,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QACvC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACvD,CAAC;IAED,gCAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,mCAAM,GAAN,UAAO,OAAwB;QAC3B,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;IAED,mCAAM,GAAN,UAAO,EAAU;QACb,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,mBAAmB;YAChE,MAAM,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC;IACL,yBAAC;AAAD,CA1DA,AA0DC,IAAA;AAED,iBAAS,kBAAkB,CAAA","file":"../../../../modules/users/services/group-member-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport GroupMemberModel = require('../models/group-member-model');\r\nimport UserModel = require('../models/user-model');\r\nimport GroupModel = require('../models/group-model');\r\n\r\nclass GroupMemberService {\r\n    getList(searchValue: string): Promise<GroupMemberModel.GroupMemberInstance[]> {\r\n        return GroupMemberModel.Model.findAll();\r\n    }\r\n\r\n    getByUser(userID: number): Promise<GroupMemberModel.GroupMemberInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (userID) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    { userID: userID }\r\n                ]\r\n            }\r\n        }\r\n\r\n        findOptions.include = [GroupModel.Model]\r\n        return GroupMemberModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    getByGroup(groupID: number): Promise<GroupMemberModel.GroupMemberInstance[]> {\r\n        console.log(groupID)\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (groupID) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    { groupID: groupID }\r\n                ]\r\n            }\r\n        }\r\n\r\n        findOptions.include = [UserModel.Model]\r\n        return GroupMemberModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<GroupMemberModel.GroupMemberInstance> {\r\n        return GroupMemberModel.Model.findById(rowID);\r\n    }\r\n\r\n    create(request: App.GroupMember): Promise<GroupMemberModel.GroupMemberInstance> {\r\n        return GroupMemberModel.Model.create(request);\r\n    }\r\n\r\n    delete(ID: number) {\r\n        return GroupMemberModel.Model.findById(ID).then((GroupMemberInstance) => {\r\n            return GroupMemberInstance.destroy();\r\n        });\r\n    }\r\n}\r\n\r\nexport = GroupMemberService"]}