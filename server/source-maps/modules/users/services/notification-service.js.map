{"version":3,"sources":["modules/users/services/notification-service.ts"],"names":[],"mappings":";AACA,IAAO,iBAAiB,WAAW,8BAA8B,CAAC,CAAC;AACnE,yDAAyD;AAEzD;IAAA;IAqDA,CAAC;IAnDG,qCAAO,GAAP,UAAQ,WAAmB;QAEvB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,MAAM;aACT;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,WAAW,CAAC,KAAK,GAAG;gBAChB,GAAG,EAAE;oBACD,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;iBAC3C;aACJ,CAAA;QACL,CAAC;QAED,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACxD,CAAC;IAED,iCAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAED,oCAAM,GAAN,UAAO,OAAyB;QAC5B,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IAED,oCAAM,GAAN,UAAO,OAAyB;QAE5B,MAAM,CAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,oBAAoB;YAEhF,oBAAoB,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;YAC5C,oBAAoB,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;YACxC,oBAAoB,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAA;YACtD,oBAAoB,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;YACxC,oBAAoB,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;YAChD,oBAAoB,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;YAExC,MAAM,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,oCAAM,GAAN,UAAO,EAAU;QAEb,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,oBAAoB;YAElE,MAAM,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC;QAE1C,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,0BAAC;AAAD,CArDA,AAqDC,IAAA;AAED,iBAAS,mBAAmB,CAAC","file":"../../../../modules/users/services/notification-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport NotificationModel = require('../models/notification-model');\r\n//import ParentService = require('../../parent-service');\r\n\r\nclass NotificationService {\r\n\r\n    getList(searchValue: string): Promise<NotificationModel.NotificationInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'name'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                $or: [\r\n                    { name: { $iLike: `%${searchValue}%` } }\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return NotificationModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<NotificationModel.NotificationInstance> {\r\n        return NotificationModel.Model.findById(rowID);\r\n    }\r\n\r\n    create(request: App.Notification): Promise<NotificationModel.NotificationInstance> {\r\n        return NotificationModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.Notification): Promise<NotificationModel.NotificationInstance> {\r\n        \r\n        return <any>(NotificationModel.Model.findById(request.ID).then((NotificationInstance) => {\r\n\r\n            NotificationInstance.userID = request.userID\r\n            NotificationInstance.name = request.name\r\n            NotificationInstance.description = request.description\r\n            NotificationInstance.link = request.link\r\n            NotificationInstance.priority = request.priority\r\n            NotificationInstance.read = request.read\r\n\r\n            return NotificationInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n\r\n        return NotificationModel.Model.findById(ID).then((NotificationInstance) => {\r\n\r\n            return NotificationInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = NotificationService;"]}