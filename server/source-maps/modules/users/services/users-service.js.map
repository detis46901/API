{"version":3,"sources":["modules/users/services/users-service.ts"],"names":[],"mappings":"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","file":"../../../../modules/users/services/users-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport UserModel = require('../models/users-model');\r\nimport bcrypt = require('bcrypt');\r\n//import Md5 = require('ts-md5/dist/md5');\r\nimport { Md5 } from 'ts-md5/dist/md5';\r\n\r\nclass UserService {\r\n\r\n    getList(searchValue: string): Promise<UserModel.UserInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'lastName'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                $or: [\r\n                    { firstName: { $iLike: `%${searchValue}%` } },\r\n                    { lastName: { $iLike: `%${searchValue}%` } },\r\n                    { email: { $iLike: `%${searchValue}%` } },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return UserModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    getByRole(roleID: number): any {\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'roleID'\r\n            ]\r\n        };\r\n\r\n        if (roleID) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    {roleID: roleID}\r\n                ]\r\n            }\r\n        }\r\n\r\n        return UserModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<UserModel.UserInstance> {\r\n        return UserModel.Model.findByPk(rowID);\r\n    }\r\n\r\n    create(request: App.User): Promise<UserModel.UserInstance> {\r\n        return UserModel.Model.create(request);\r\n    }\r\n\r\n    login(request: App.User): any {\r\n        // var email = new Array<string>();\r\n        // email.push(\"email\", \"email\")\r\n        // //var email = [\"email\", \"email\"]\r\n        // UserModel.Model.find({attributes:email = request.body.email})\r\n        // .exec()\r\n        // .then(user => {\r\n        //     if(user) {\r\n        //         return res.status(409).json({\r\n        //             message: \"User already exists.\"\r\n        //         })\r\n        //     } else {\r\n        //     }\r\n        // })\r\n    }\r\n\r\n    update(request: App.User): Promise<UserModel.UserInstance> {\r\n        \r\n        return <any>(UserModel.Model.findByPk(request.ID).then((UserInstance) => {\r\n\r\n            UserInstance.firstName = request.firstName;\r\n            UserInstance.lastName = request.lastName;\r\n            UserInstance.roleID = request.roleID;\r\n            UserInstance.email = request.email;\r\n            UserInstance.active = request.active;\r\n            UserInstance.administrator = request.administrator;\r\n            if (request.password) {\r\n                UserInstance.password = request.password;\r\n            }\r\n\r\n            return UserInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n\r\n        return UserModel.Model.findByPk(ID).then((UserInstance) => {\r\n\r\n            return UserInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = UserService;"]}