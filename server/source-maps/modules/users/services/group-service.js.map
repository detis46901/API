{
    "version": 3,
    "sources": [
        "modules/users/services/group-service.ts"
    ],
    "names": [],
    "mappings": ";AACA,IAAO,UAAU,WAAW,uBAAuB,CAAC,CAAC;AAErD;IAAA;IAmDA,CAAC;IAjDG,8BAAO,GAAP,UAAQ,WAAmB;QAEvB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,OAAO;aACV;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,WAAW,CAAC,KAAK,GAAG;gBAChB,GAAG,EAAE;oBACD,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;oBAC7C,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;oBAC5C,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;iBAC5C;aACJ,CAAA;QACL,CAAC;QAED,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACjD,CAAC;IAED,0BAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,6BAAM,GAAN,UAAO,OAAkB;QACrB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED,6BAAM,GAAN,UAAO,OAAkB;QAErB,MAAM,CAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,aAAa;YAElE,aAAa,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YAClC,aAAa,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YAEhD,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,6BAAM,GAAN,UAAO,KAAa;QAEhB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,aAAa;YAEvD,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAEnC,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,mBAAC;AAAD,CAnDA,AAmDC,IAAA;AAED,iBAAS,YAAY,CAAC",
    "file": "../../../../modules/users/services/group-service.js",
    "sourcesContent": [
        "import Sequelize = require('sequelize');\r\nimport GroupModel = require('../models/group-model');\r\n\r\nclass GroupService {\r\n\r\n    getList(searchValue: string): Promise<GroupModel.GroupInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'group'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                $or: [\r\n                    { firstName: { $iLike: `%${searchValue}%` } },\r\n                    { lastName: { $iLike: `%${searchValue}%` } },\r\n                    { email: { $iLike: `%${searchValue}%` } },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return GroupModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<GroupModel.GroupInstance> {\r\n        return GroupModel.Model.findById(rowID);\r\n    }\r\n\r\n    create(request: App.Group): Promise<GroupModel.GroupInstance> {\r\n        return GroupModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.Group): Promise<GroupModel.GroupInstance> {\r\n        \r\n        return <any>(GroupModel.Model.findById(request.ID).then((GroupInstance) => {\r\n\r\n            GroupInstance.name = request.name;\r\n            GroupInstance.description = request.description;\r\n\r\n            return GroupInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(rowID: number) {\r\n\r\n        return GroupModel.Model.findById(rowID).then((GroupInstance) => {\r\n\r\n            return GroupInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = GroupService;"
    ]
}