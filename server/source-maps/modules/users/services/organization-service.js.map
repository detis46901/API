{"version":3,"sources":["modules/users/services/organization-service.ts"],"names":[],"mappings":";AACA,IAAO,eAAe,WAAW,8BAA8B,CAAC,CAAC;AAKjE;IAAA;IAoDA,CAAC;IAlDG,qCAAO,GAAP,UAAQ,WAAmB;QAEvB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,YAAY;aACf;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,WAAW,CAAC,KAAK,GAAG;gBAChB,GAAG,EAAE;oBACD,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;oBAC7C,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;oBAC5C,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;iBAC5C;aACJ,CAAA;QACL,CAAC;QAED,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACvD,CAAC;IAED,iCAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,oCAAM,GAAN,UAAO,OAAuB;QAC1B,OAAO,CAAC,GAAG,CAAE,mBAAmB,CAAC,CAAA;QACjC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;IAED,oCAAM,GAAN,UAAO,OAAuB;QAE1B,MAAM,CAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,kBAAkB;YAE7E,kBAAkB,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;YACnD,kBAAkB,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAE3C,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,oCAAM,GAAN,UAAO,KAAa;QAEhB,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,kBAAkB;YAElE,MAAM,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;QAExC,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,0BAAC;AAAD,CApDA,AAoDC,IAAA","file":"../../../../modules/users/services/organization-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport DepartmentModel = require('../models/organization-model');\r\nimport GroupModel = require('../models/organization-model');\r\nimport RoleModel = require('../models/organization-model');\r\n\r\n\r\nclass OrganizationService {\r\n\r\n    getList(searchValue: string): Promise<DepartmentModel.DepartmentInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'department'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                $or: [\r\n                    { firstName: { $iLike: `%${searchValue}%` } },\r\n                    { lastName: { $iLike: `%${searchValue}%` } },\r\n                    { email: { $iLike: `%${searchValue}%` } },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return DepartmentModel.dModel.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<DepartmentModel.DepartmentInstance> {\r\n        return DepartmentModel.dModel.findById(rowID);\r\n    }\r\n\r\n    create(request: App.Department): Promise<DepartmentModel.DepartmentInstance> {\r\n        console.log ('At Create Request')\r\n        return DepartmentModel.dModel.create(request);\r\n    }\r\n\r\n    update(request: App.Department): Promise<DepartmentModel.DepartmentInstance> {\r\n        \r\n        return <any>(DepartmentModel.dModel.findById(request.ID).then((DepartmentInstance) => {\r\n\r\n            DepartmentInstance.department = request.department;\r\n            DepartmentInstance.active = request.active;\r\n\r\n            return DepartmentInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(rowID: number) {\r\n\r\n        return DepartmentModel.dModel.findById(rowID).then((DepartmentInstance) => {\r\n\r\n            return DepartmentInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = DepartmentService;"]}