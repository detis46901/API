{"version":3,"sources":["modules/users/services/role-service.ts"],"names":[],"mappings":"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","file":"../../../../modules/users/services/role-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport RoleModel = require('../models/role-model');\r\n\r\n\r\nclass RoleService {\r\n\r\n    getList(searchValue: string): Promise<RoleModel.RoleInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                $or: [\r\n                    { firstName: { $iLike: `%${searchValue}%` } },\r\n                    { lastName: { $iLike: `%${searchValue}%` } },\r\n                    { email: { $iLike: `%${searchValue}%` } },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return RoleModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    getrolesgroupsdepartments(searchValue: string): Promise<RoleModel.RoleInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'role'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                $or: [\r\n                    { firstName: { $iLike: `%${searchValue}%` } },\r\n                    { lastName: { $iLike: `%${searchValue}%` } },\r\n                    { email: { $iLike: `%${searchValue}%` } },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return RoleModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<RoleModel.RoleInstance> {\r\n        return RoleModel.Model.findById(rowID);\r\n    }\r\n\r\n    getByGroup(groupID: number): any {\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'groupID'\r\n            ]\r\n        };\r\n\r\n        if (groupID) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    {groupID: groupID}\r\n                ]\r\n            }\r\n        }\r\n\r\n        return RoleModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    create(request: App.Role): Promise<RoleModel.RoleInstance> {\r\n        console.log(\"made it to the API\")\r\n        return RoleModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.Role): Promise<RoleModel.RoleInstance> {\r\n        \r\n        return <any>(RoleModel.Model.findById(request.ID).then((RoleInstance) => {\r\n\r\n            RoleInstance.role = request.role;\r\n            RoleInstance.active = request.active;\r\n\r\n            return RoleInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n\r\n        return RoleModel.Model.findById(ID).then((RoleInstance) => {\r\n\r\n            return RoleInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = RoleService;"]}