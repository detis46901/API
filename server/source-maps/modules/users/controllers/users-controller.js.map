{"version":3,"sources":["modules/users/controllers/users-controller.ts"],"names":[],"mappings":"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","file":"../../../../modules/users/controllers/users-controller.js","sourcesContent":["import express = require('express');\r\nimport UserService = require('../services/users-service');\r\nimport AuthService = require('../services/authenticate-service');\r\nimport sequalizeModel = require(\"../models/users-model\");\r\nimport Sequelize = require('sequelize');\r\nimport jwt = require('jsonwebtoken');\r\n\r\nvar router = express.Router();\r\nvar service = new UserService();\r\nvar authService = new AuthService();\r\nvar jwt_secret = \"cityofkokomo46901\"\r\n\r\nrouter.get('/list', (req, res) => {\r\n    service.getList(req.query.searchValue).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n    \r\n});\r\n\r\nrouter.get('/one', (req, res) => {\r\n    var User = <number>req.query.rowid;\r\n    \r\n    service.get(User).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n\r\n});\r\n\r\nrouter.get('/getbyrole', (req, res) => {\r\n    var roleID = <number>req.query.roleID\r\n\r\n    service.getByRole(roleID).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    })\r\n});\r\n\r\nrouter.post('/create', (req, res) => {\r\n    var request = <App.User>req.body;\r\n\r\n    service.create(request).then(function (result) {\r\n        res.send(result);\r\n    }).catch(function (error) {\r\n        res.send(error);\r\n    });\r\n});\r\n\r\nrouter.post('/login', (req, res) => {\r\n    // var request = <App.User>req.body;\r\n\r\n    // service.create(request).then(function (result) {\r\n    //     res.send(result);\r\n    // }).catch(function (error) {\r\n    //     res.send(error);\r\n    // });\r\n\r\n    /*From 'authenticate-controller.ts'/authenticate*/\r\n    var request = <App.User>req.body;\r\n    \r\n    var row = 0\r\n    var admin = false\r\n    console.log(req)\r\n    authService.getList(request.email, request.password).then((user) => {\r\n        //row = result[0].ID\r\n        //admin = result[0].administrator\r\n        //if (result.length==0){res.send({}) } else  {res.send(JSON.stringify({ token: 'fake-jwt-token2', userid: row, admin: admin }));}\r\n        if(user.length < 1) {\r\n            return res.status(404).json({\r\n                message: 'User not found.'\r\n            })\r\n        } else {\r\n            const token = jwt.sign({\r\n                email: user[0].email,\r\n                ID: user[0].ID\r\n            }, \r\n            jwt_secret,\r\n            {\r\n                expiresIn: \"1h\"\r\n            }\r\n        );\r\n        return res.status(200).json({\r\n            message: \"Auth successful\",\r\n            token: token\r\n        })\r\n\r\n        }\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n});\r\n\r\nrouter.put('/update', (req, res) => {\r\n    var request = <App.User>req.body;\r\n\r\n    service.update(request).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n\r\n});\r\n\r\nrouter.delete('/delete', (req, res) => {\r\n    var ID = <number>req.query.ID;\r\n    console.log (ID);\r\n    service.delete(ID).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n\r\n});\r\n\r\n\r\nexport = router;"]}