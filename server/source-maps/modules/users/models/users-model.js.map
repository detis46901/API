{"version":3,"sources":["modules/users/models/users-model.ts"],"names":[],"mappings":";AAAA,IAAO,YAAY,WAAW,6BAA6B,CAAC,CAAC;AAC7D,IAAO,SAAS,WAAW,WAAW,CAAC,CAAC;AAExC,IAAI,EAAE,GAAG,YAAY,EAAE,CAAC;AAOxB,IAAI,cAAc,GAAG,EAAE,CAAC,MAAM,CAAyB,MAAM,EAAO;IAChE,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE;IACtE,SAAS,EAAE;QACP,IAAI,EAAE,SAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;SACf;KACJ;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,SAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;SACf;KACJ;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,SAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;SAChB;KACJ;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,SAAS,CAAC,OAAO;QACvB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC;SACT;KACJ;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,SAAS,CAAC,OAAO;QACvB,QAAQ,EAAE;YACN,EAAE,EAAE,CAAC,OAAO,EAAC,GAAG,CAAC,CAAC,oBAAoB;SACzC;KACJ;IACD,KAAK,EAAE;QACH,IAAI,EAAE,SAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;SAChB;KACJ;IACD,aAAa,EAAE;QACX,IAAI,EAAE,SAAS,CAAC,OAAO;QACvB,QAAQ,EAAE;YACN,EAAE,EAAE,CAAC,OAAO,EAAC,GAAG,CAAC;SACpB;KACJ;CACJ,CAAC,CAAC;AAGH,IAAI,IAAI,GAAG,CAAC,CAAC;AAEb,cAAc,CAAC,OAAO,CAAC,EACtB,CAAC,CAAC,IAAI,CAAC,UAAS,MAAM;IACnB,EAAE,CAAA,CAAC,MAAM,IAAI,IAAI,CAAC;QACd,IAAI,GAAG,CAAC,CAAC,CAAC,4CAA4C;AAC9D,CAAC,CAAC,CAAC;AAEH,EAAE,CAAA,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;IACX,cAAc,CAAC,MAAM,CAAC;QAClB,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,WAAW;QACrB,QAAQ,EAAE,kCAAkC;QAC5C,MAAM,EAAE,CAAC;QACT,MAAM,EAAE,IAAI;QACZ,KAAK,EAAE,6BAA6B;QACpC,aAAa,EAAE,IAAI;KACtB,CAAC,CAAA;AACN,CAAC;AAED,cAAc,CAAC,IAAI,EAAE,CAAA;AACV,aAAK,GAAG,cAAc,CAAC","file":"../../../../modules/users/models/users-model.js","sourcesContent":["import dbConnection = require('../../../core/db-connection');\r\nimport Sequelize = require('sequelize');\r\n\r\nvar db = dbConnection();\r\n\r\n\r\nexport interface UserInstance extends Sequelize.Instance<UserInstance, App.User>, App.User { }\r\nexport interface UserModel extends Sequelize.Model<UserInstance, App.User> { }\r\n\r\n\r\nvar sequalizeModel = db.define<UserInstance, App.User>('user', <any>{\r\n    ID: { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },\r\n    firstName: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n            len: [2, 30]\r\n        }\r\n    },\r\n    lastName: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n            len: [2, 30]\r\n        }\r\n    },\r\n    password: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n            len: [1, 200]\r\n        }\r\n    },\r\n    roleID: {\r\n        type: Sequelize.INTEGER,\r\n        validate: {\r\n            min: 1\r\n        }\r\n    },    \r\n    active: {\r\n        type: Sequelize.BOOLEAN,\r\n        validate: {\r\n            is: [\"[a-z]\",'i'] //only allow letters\r\n        }\r\n    },\r\n    email: { //consider adding isEmail: true when this is ready for deployment\r\n        type: Sequelize.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n            len: [1, 200]\r\n        }\r\n    },\r\n    administrator: {\r\n        type: Sequelize.BOOLEAN,\r\n        validate: {\r\n            is: [\"[a-z]\",'i']\r\n        }\r\n    }\r\n});\r\n\r\n   \r\nvar flag = 0;\r\n\r\nsequalizeModel.findAll({\r\n}).then(function(result) {\r\n    if(result == null)\r\n        flag = 1; //Create default user if there isn't one yet\r\n});\r\n\r\nif(flag == 1) {\r\n    sequalizeModel.create({\r\n        firstName: 'Carey',\r\n        lastName: 'Stranahan',\r\n        password: 'c8108df8eaad2bf5004850ab32c9fa23', // this is Monday01\r\n        roleID: 1,\r\n        active: true,\r\n        email: 'cstranahan@cityofkokomo.org',\r\n        administrator: true\r\n    })\r\n}\r\n\r\nsequalizeModel.sync() \r\nexport var Model = sequalizeModel;"]}