{"version":3,"sources":["modules/postGIS_layers/controllers/geojson-controller.ts"],"names":[],"mappings":";AAAA,IAAO,OAAO,WAAW,SAAS,CAAC,CAAC;AAEpC,IAAO,cAAc,WAAW,6BAA6B,CAAC,CAAC;AAE/D,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAC9B,IAAI,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;AAEnC,sCAAsC;AAEtC,gEAAgE;AAChE,4BAA4B;AAC5B,4BAA4B;AAC5B,2BAA2B;AAC3B,UAAU;AAEV,MAAM;AAEN,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,GAAG;IAExB,IAAI,KAAK,GAAW,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;IAEpC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;QAC3B,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;QACX,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,UAAC,GAAG,EAAE,GAAG;IAEvB,IAAI,KAAK,GAAW,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;IAGpC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;QAC9B,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;QACX,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC;AAEP,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,UAAC,GAAG,EAAE,GAAG;IAE9B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACZ,IAAI,KAAK,GAAW,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;IACpC,IAAI,KAAK,GAAW,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;IACpC,IAAI,IAAI,GAAW,GAAG,CAAC,KAAK,CAAC,IAAI,CAAA;IACjC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAA;IAC7B,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAA;IAC7B,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,CAAA;IAC3B,OAAO,CAAC,SAAS,CAAC,KAAK,EAAC,KAAK,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;QAC5C,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;QACX,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,UAAC,GAAG,EAAE,GAAG;IAEpC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACZ,IAAI,KAAK,GAAW,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;IAEpC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;QACnC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;QACX,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC;AAsCP,iBAAS,MAAM,CAAC","file":"../../../../modules/postGIS_layers/controllers/geojson-controller.js","sourcesContent":["import express = require('express');\r\n\r\nimport geoJSONService = require('../services/geojson-service');\r\n\r\nvar router = express.Router();\r\nvar service = new geoJSONService();\r\n\r\n// router.get('/list', (req, res) => {\r\n    \r\n//     service.getList(req.query.searchValue).then((result) => {\r\n//         res.send(result);\r\n//     }).catch((error) => {\r\n//         res.send(error);\r\n//     });\r\n    \r\n// });\r\n\r\nrouter.get('/all', (req, res) => {\r\n\r\n    var table = <string>req.query.table;\r\n    \r\n    service.get(table).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n\r\n});\r\n\r\nrouter.get('/create', (req, res) => {\r\n    \r\n        var table = <string>req.query.table;\r\n       \r\n        \r\n        service.create(table).then((result) => {\r\n            res.send(result);\r\n        }).catch((error) => {\r\n            res.send(error);\r\n        });\r\n    \r\n    });\r\n\r\nrouter.get('/addColumn', (req, res) => {\r\n        \r\n    console.log(req)\r\n        var table = <string>req.query.table;\r\n        var field = <string>req.query.field;\r\n        var type = <string>req.query.type\r\n        console.log('table=' + table)\r\n        console.log('field=' + field)\r\n        console.log('type=' + type)\r\n        service.addColumn(table,field,type).then((result) => {\r\n            res.send(result);\r\n        }).catch((error) => {\r\n            res.send(error);\r\n        });\r\n    \r\n    });\r\n\r\n    router.get('/deleteTable', (req, res) => {\r\n        \r\n    console.log(req)\r\n        var table = <string>req.query.table;\r\n        \r\n        service.deleteTable(table).then((result) => {\r\n            res.send(result);\r\n        }).catch((error) => {\r\n            res.send(error);\r\n        });\r\n    \r\n    });\r\n// router.post('/create', (req, res) => {\r\n    \r\n//     var request = <App.User>req.body;\r\n//     console.log(request)\r\n//     service.create(request).then((result) => {\r\n//         res.send(result);\r\n//     }).catch((error) => {\r\n//         res.send(error);\r\n//     });\r\n\r\n// });\r\n\r\n// router.put('/update', (req, res) => {\r\n    \r\n//     var request = <App.User>req.body;\r\n\r\n//     service.update(request).then((result) => {\r\n//         res.send(result);\r\n//     }).catch((error) => {\r\n//         res.send(error);\r\n//     });\r\n\r\n// });\r\n\r\n// router.delete('/delete', (req, res) => {\r\n    \r\n//     var ID = <number>req.query.ID;\r\n//     console.log (ID);\r\n//     service.delete(ID).then((result) => {\r\n//         res.send(result);\r\n//     }).catch((error) => {\r\n//         res.send(error);\r\n//     });\r\n\r\n//});\r\n\r\n\r\nexport = router;"]}