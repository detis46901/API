{"version":3,"sources":["modules/postGIS_layers/services/geojson-service.ts"],"names":[],"mappings":";AAAA,IAAO,YAAY,WAAW,6BAA6B,CAAC,CAAC;AAE7D,IAAI,EAAE,GAAG,YAAY,EAAE,CAAC;AAExB;IAAA;IAkDA,CAAC;IAhDG,wBAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,oaAWe,GAAG,KAAK,GAAG,kBAAkB,CAAC,CAAA;IACjE,CAAC;IAED,4BAAO,GAAP,UAAQ,KAAa,EAAE,KAAa;QAChC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,oaAWe,GAAG,KAAK,GAAG,SAAS,GAAG,KAAK,GAAG,8BAA8B,CAAC,CAAA;IACjG,CAAC;IAED,2BAAM,GAAN,UAAO,KAAa;QAChB,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,uBAAuB,GAAG,KAAK,GAAG,iHAG/C,CAAC,CAAA;IACR,CAAC;IAED,8BAAS,GAAT,UAAU,KAAa,EAAE,KAAa,EAAE,IAAY;QAChD,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,sBAAsB,GAAG,KAAK,GAAG,QAAQ,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,CAAA;IACpF,CAAC;IAED,gCAAW,GAAX,UAAY,KAAa;QACrB,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,qBAAqB,GAAG,KAAK,CAAC,CAAA;IAClD,CAAC;IAED,mCAAc,GAAd,UAAe,KAAa,EAAE,QAAgB,EAAE,EAAU;QACtD,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,iBAAiB,GAAG,KAAK,GAAG,8CAA8C,GAAG,QAAQ,GAAG,sBAAsB,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA;IAC/I,CAAC;IACL,iBAAC;AAAD,CAlDA,AAkDC,IAAA;AAED,iBAAS,UAAU,CAAC","file":"../../../../modules/postGIS_layers/services/geojson-service.js","sourcesContent":["import dbConnection = require('../../../core/db-connection');\r\n\r\nvar db = dbConnection();\r\n\r\nclass SQLService {\r\n\r\n    get(table: string): Promise<any> {\r\n        return db.query(`SELECT jsonb_build_object(\r\n            'type',     'FeatureCollection',\r\n            'features', jsonb_agg(feature)\r\n        )\r\n        FROM (\r\n          SELECT jsonb_build_object(\r\n            'type',       'Feature',\r\n            'id',         id,\r\n            'geometry',   ST_AsGeoJSON(geom)::jsonb,\r\n            'properties', to_jsonb(row) - 'geom'\r\n          ) AS feature\r\n          FROM (SELECT * FROM mycube.t` + table + `) row) features;`)\r\n    }\r\n\r\n    getSome(table: string, where: string): Promise<any> {\r\n        return db.query(`SELECT jsonb_build_object(\r\n            'type',     'FeatureCollection',\r\n            'features', jsonb_agg(feature)\r\n        )\r\n        FROM (\r\n          SELECT jsonb_build_object(\r\n            'type',       'Feature',\r\n            'id',         id,\r\n            'geometry',   ST_AsGeoJSON(geom)::jsonb,\r\n            'properties', to_jsonb(row) - 'geom'\r\n          ) AS feature\r\n          FROM (SELECT * FROM mycube.t` + table + ` WHERE ` + where + ` ORDER BY id) row) features;`)\r\n    }\r\n\r\n    create(table: string): Promise<any> {\r\n        return db.query(`CREATE TABLE mycube.t` + table + ` (\r\n            ID    timestamp PRIMARY KEY DEFAULT current_timestamp,\r\n            geom   geometry\r\n        );`)\r\n    }\r\n\r\n    addColumn(table: string, field: string, type: string): Promise<any> {\r\n        return db.query('ALTER TABLE mycube.t' + table + ' ADD \"' + field + '\" ' + type)\r\n    }\r\n\r\n    deleteTable(table: string): Promise<any> {\r\n        return db.query('DROP TABLE mycube.t' + table)\r\n    }\r\n\r\n    updateGeometry(table: string, geometry: string, id: string): Promise<any> {\r\n        return db.query(\"UPDATE mycube.t\" + table + \" SET geom = (ST_SetSRID(ST_GeomFromGeoJSON('\" + geometry + \"'),4326)) WHERE id='\" + id + \"';\")\r\n    }\r\n}\r\n\r\nexport = SQLService;"]}