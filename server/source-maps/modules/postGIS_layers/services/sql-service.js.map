{"version":3,"sources":["modules/postGIS_layers/services/sql-service.ts"],"names":[],"mappings":"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","file":"../../../../modules/postGIS_layers/services/sql-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport dbConnection = require('../../../core/db-connection');\r\n\r\nvar db = dbConnection();\r\n\r\nclass SQLService {\r\n    \r\n    // getList(searchValue: string): Promise<any[]> {\r\n\r\n    //     var findOptions: Sequelize.FindOptions = {\r\n    //         order: [\r\n    //             'lastName'\r\n    //         ]\r\n    //     };\r\n\r\n    //     if (searchValue) {\r\n    //         findOptions.where = {\r\n    //             $or: [\r\n    //                 { firstName: { $iLike: `%${searchValue}%` } },\r\n    //                 { lastName: { $iLike: `%${searchValue}%` } },\r\n    //                 { email: { $iLike: `%${searchValue}%` } },\r\n    //             ]\r\n    //         }\r\n    //     }\r\n        \r\n    //     return UserModel.Model.findAll(findOptions);\r\n    // }\r\n\r\n    get(table: string): Promise<any> {\r\n        return db.query(\"SELECT * from mycube.t\" + table)\r\n        //return db.query('SELECT * FROM $1', { bind: [table], type: sequelize.queryTypes.SELECT})\r\n    }\r\n\r\n    create(table: string): Promise<any> {\r\n    //     db.query(`CREATE SEQUENCE public.\"test3_ID_seq\"\r\n    //     INCREMENT 1\r\n    //     MINVALUE 1\r\n    //     MAXVALUE 9223372036854775807\r\n    //     START 38\r\n    //     CACHE 1;\r\n    //   ALTER TABLE public.\"test3_ID_seq\"\r\n    //     OWNER TO geoadmin;\r\n    //   `)\r\n        console.log(\"API table=\" + JSON.stringify(table))\r\n        return db.query(`CREATE TABLE mycube.t` + table + ` (\r\n            ID    SERIAL PRIMARY KEY,\r\n            geom   geometry\r\n        );\r\n        `)\r\n    }\r\n\r\n    setSRID(table): Promise<any> {\r\n        console.log((`SELECT UpdateGeometrySRID('mycube', 't` + table + `','geom',4326);`))\r\n        return db.query(`SELECT UpdateGeometrySRID('mycube', 't` + table + `','geom',4326);`)\r\n    }\r\n\r\n    addColumn(table: string, field: string, type: string): Promise<any> {\r\n        return db.query('ALTER TABLE mycube.t' + table + ' ADD \"' + field + '\" ' + type)\r\n    }\r\n\r\n    deleteTable(table: string): Promise<any> {\r\n        return db.query('DROP TABLE mycube.t' + table)\r\n    }\r\n\r\n    addRecord(table: string, geometry: string): Promise<any> {\r\n        return db.query(\"INSERT INTO mycube.t\" + table + \" (geom) VALUES (ST_GeomFromGeoJSON('\" + geometry + \"')) RETURNING id;\")\r\n    }\r\n\r\n    deleteRecord(table: string, id: string): Promise<any> {\r\n        console.log (\"Deleting table = \" + table + \" and id = \" + id +\"';\" )\r\n        return db.query(\"DELETE FROM mycube.t\" + table + \" WHERE id = '\" + id + \"';\")\r\n    }\r\n    \r\n    getschema(table:string): Promise<any> {\r\n        return db.query(\"SELECT column_name AS field, data_type as type FROM information_schema.columns WHERE table_schema = 'mycube' AND table_name = 't\" + table + \"'\")\r\n    }\r\n\r\n    getsingle(table:string, id:string): Promise<any> {\r\n        return db.query(\"SELECT * FROM mycube.t\" + table + \" WHERE id='\" + id + \"';\")\r\n    }\r\n    update(table: string, id: string, field: string, type: string, value: any) {\r\n        switch (type) {\r\n            case \"integer\": {\r\n                return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = ' + value + \" WHERE id='\" + id + \"';\")\r\n            }\r\n            case \"text\": {\r\n                return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = ' + \"'\" + value + \"' WHERE \" + \"id='\" + id + \"';\") \r\n            }\r\n            case \"boolean\": {\r\n                return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = ' + value + \" WHERE id='\" + id + \"';\")\r\n            }\r\n            case \"date\": {\r\n                return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = ' + \"'\" + value + \"' WHERE id='\" + id + \"';\")\r\n            }\r\n        }\r\n    }\r\n//     create(request: App.User): Promise<UserModel.UserInstance> {\r\n//         //let plain_password = request.password\r\n//         //put the hash in here, then set request.password to hash result, have the code written in the js of this file\r\n//         //request.password = (Md5.hashStr(\"Monday01\")).toString()\r\n//         return UserModel.Model.create(request);\r\n//     }\r\n\r\n//     update(request: App.User): Promise<UserModel.UserInstance> {\r\n        \r\n//         return <any>(UserModel.Model.findById(request.ID).then((UserInstance) => {\r\n\r\n//             UserInstance.firstName = request.firstName;\r\n//             UserInstance.lastName = request.lastName;\r\n//             UserInstance.roleID = request.roleID;\r\n//             UserInstance.email = request.email;\r\n//             UserInstance.active = request.active;\r\n//             UserInstance.administrator = request.administrator;\r\n//             if (request.password) {\r\n//                 UserInstance.password = request.password;\r\n//             }\r\n\r\n//             return UserInstance.save();\r\n//         }));\r\n//     }\r\n\r\n//     delete(ID: number) {\r\n\r\n//         return UserModel.Model.findById(ID).then((UserInstance) => {\r\n\r\n//             return UserInstance.destroy();\r\n\r\n//         });\r\n//     }\r\n\r\n}\r\n\r\nexport = SQLService;"]}