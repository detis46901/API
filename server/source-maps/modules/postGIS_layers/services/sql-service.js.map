{"version":3,"sources":["modules/postGIS_layers/services/sql-service.ts"],"names":[],"mappings":";AACA,IAAO,YAAY,WAAW,6BAA6B,CAAC,CAAC;AAE7D,IAAI,EAAE,GAAG,YAAY,EAAE,CAAC;AAExB;IAAA;IA8DA,CAAC;IA5DG,iDAAiD;IAEjD,iDAAiD;IACjD,mBAAmB;IACnB,yBAAyB;IACzB,YAAY;IACZ,SAAS;IAET,yBAAyB;IACzB,gCAAgC;IAChC,qBAAqB;IACrB,iEAAiE;IACjE,gEAAgE;IAChE,6DAA6D;IAC7D,gBAAgB;IAChB,YAAY;IACZ,QAAQ;IAER,mDAAmD;IACnD,IAAI;IAEJ,wBAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,gBAAgB,GAAG,KAAK,CAAC,CAAA;QACzC,0FAA0F;IAC9F,CAAC;IAoCL,iBAAC;AAAD,CA9DA,AA8DC,IAAA;AAED,iBAAS,UAAU,CAAC","file":"../../../../modules/postGIS_layers/services/sql-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport dbConnection = require('../../../core/db-connection');\r\n\r\nvar db = dbConnection();\r\n\r\nclass SQLService {\r\n    \r\n    // getList(searchValue: string): Promise<any[]> {\r\n\r\n    //     var findOptions: Sequelize.FindOptions = {\r\n    //         order: [\r\n    //             'lastName'\r\n    //         ]\r\n    //     };\r\n\r\n    //     if (searchValue) {\r\n    //         findOptions.where = {\r\n    //             $or: [\r\n    //                 { firstName: { $iLike: `%${searchValue}%` } },\r\n    //                 { lastName: { $iLike: `%${searchValue}%` } },\r\n    //                 { email: { $iLike: `%${searchValue}%` } },\r\n    //             ]\r\n    //         }\r\n    //     }\r\n        \r\n    //     return UserModel.Model.findAll(findOptions);\r\n    // }\r\n\r\n    get(table: string): Promise<any> {\r\n        return db.query(\"SELECT * from \" + table)\r\n        //return db.query('SELECT * FROM $1', { bind: [table], type: sequelize.queryTypes.SELECT})\r\n    }\r\n\r\n//     create(request: App.User): Promise<UserModel.UserInstance> {\r\n//         //let plain_password = request.password\r\n//         //put the hash in here, then set request.password to hash result, have the code written in the js of this file\r\n//         //request.password = (Md5.hashStr(\"Monday01\")).toString()\r\n//         return UserModel.Model.create(request);\r\n//     }\r\n\r\n//     update(request: App.User): Promise<UserModel.UserInstance> {\r\n        \r\n//         return <any>(UserModel.Model.findById(request.ID).then((UserInstance) => {\r\n\r\n//             UserInstance.firstName = request.firstName;\r\n//             UserInstance.lastName = request.lastName;\r\n//             UserInstance.roleID = request.roleID;\r\n//             UserInstance.email = request.email;\r\n//             UserInstance.active = request.active;\r\n//             UserInstance.administrator = request.administrator;\r\n//             if (request.password) {\r\n//                 UserInstance.password = request.password;\r\n//             }\r\n\r\n//             return UserInstance.save();\r\n//         }));\r\n//     }\r\n\r\n//     delete(ID: number) {\r\n\r\n//         return UserModel.Model.findById(ID).then((UserInstance) => {\r\n\r\n//             return UserInstance.destroy();\r\n\r\n//         });\r\n//     }\r\n\r\n}\r\n\r\nexport = SQLService;"]}