{"version":3,"sources":["modules/postGIS_layers/services/sql-service.ts"],"names":[],"mappings":"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","file":"../../../../modules/postGIS_layers/services/sql-service.js","sourcesContent":["import dbConnection = require('../../../core/db-connection');\r\nimport { MyCubeField } from '../models/postGIS_layers.model';\r\nimport { resolve } from 'bluebird';\r\nimport Sequelize = require('sequelize');\r\nimport UserModel = require('../../users/models/user-model');\r\n\r\nvar db = dbConnection();\r\n\r\n\r\nclass SQLService {\r\n\r\n    // getList(searchValue: string): Promise<any[]> {\r\n\r\n    //     var findOptions: Sequelize.FindOptions = {\r\n    //         order: [\r\n    //             'lastName'\r\n    //         ]\r\n    //     };\r\n\r\n    //     if (searchValue) {\r\n    //         findOptions.where = {\r\n    //             [Sequelize.Op.or]: [\r\n    //                 { firstName: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n    //                 { lastName: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n    //                 { email: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n    //             ]\r\n    //         }\r\n    //     }\r\n\r\n    //     return UserModel.Model.findAll(findOptions);\r\n    // }\r\n\r\n    get(schema: string, table: string): Promise<any> {\r\n        if (schema == 'mycube') {\r\n            return db.query(\"SELECT *,ST_Length(ST_Transform(geom,2965)), ST_Area(ST_Transform(geom,2965)) from \" + schema + \".\" + table + ' ORDER BY id')\r\n        }\r\n        else {\r\n            return db.query(\"SELECT * from \" + schema + \".\" + table + ' ORDER BY id')\r\n        }\r\n        //return db.query('SELECT * FROM $1', { bind: [table], type: sequelize.queryTypes.SELECT})\r\n    }\r\n\r\n    getUserFromAPIKey(apikey: string): Promise<UserModel.UserInstance[]> {\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'apikey'\r\n            ]\r\n        };\r\n\r\n        if (apikey) {\r\n            findOptions.where = {\r\n                apikey: { [Sequelize.Op.eq]: `${apikey}` }\r\n            }\r\n        }\r\n        return UserModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    getsheets(schema: string, table: string): Promise<any> {\r\n        let promise = new Promise((resolve, reject) => {\r\n            let responsehtml: string = \"<html><body><table>\"\r\n            this.getschema(schema, table).then((schemaarray) => {\r\n                let schema2 = schemaarray[0]\r\n                //header information\r\n                responsehtml += \"<tr>\"\r\n                schema2.forEach(schemaelement => {\r\n                    if (schemaelement['field'] != 'geom') {\r\n                        responsehtml += \"<th>\" + [schemaelement['field']] + \"</th>\"\r\n                    }\r\n                });\r\n                if (schema == 'mycube') {\r\n                    responsehtml += \"<th>Length (ft)</th>\"\r\n                    responsehtml += \"<th>Area (sqft)</th>\"\r\n                }\r\n                responsehtml += \"</tr>\"\r\n\r\n                this.get(schema, table).then((dataarray) => {\r\n                    let data = (dataarray[0])\r\n                    data.forEach(dataelement => {\r\n                        responsehtml += \"<tr>\"\r\n                        schema2.forEach(schemaelement => {\r\n                            if (schemaelement['field'] != 'geom') {\r\n                                if (!dataelement[schemaelement['field']] || dataelement[schemaelement['field']] == \"null\") { dataelement[schemaelement['field']] = \"\" }\r\n                                responsehtml += \"<td>\" + dataelement[schemaelement['field']] + \"</td>\"\r\n                            }\r\n                        });\r\n                        if (schema == 'mycube') {\r\n                            responsehtml += \"<td>\" + dataelement['st_length'] + '</td>'\r\n                            responsehtml += \"<td>\" + dataelement['st_area'] + '</td>'\r\n                        }\r\n                        responsehtml += \"</tr>\"\r\n                    });\r\n                    responsehtml += \"</table></body></html>\"\r\n                    resolve(responsehtml)\r\n                })\r\n            })\r\n        })\r\n        return promise\r\n    }\r\n\r\n    getlength(table: string, id: number): Promise<any> {\r\n        return db.query('SELECT ST_Length(ST_Transform(geom,2965)) from mycube.t' + table + ' WHERE id=' + id + ';')\r\n    }\r\n\r\n    create(table: string): Promise<any> {\r\n        //     db.query(`CREATE SEQUENCE public.\"test3_ID_seq\"\r\n        //     INCREMENT 1\r\n        //     MINVALUE 1\r\n        //     MAXVALUE 9223372036854775807\r\n        //     START 38\r\n        //     CACHE 1;\r\n        //   ALTER TABLE public.\"test3_ID_seq\"\r\n        //     OWNER TO geoadmin;\r\n        //   `)\r\n        return db.query(`CREATE TABLE mycube.t` + table + ` (\r\n                ID    SERIAL PRIMARY KEY,\r\n                geom   geometry\r\n            );\r\n        `)\r\n    }\r\n\r\n    getConstraints(schema: string, table: string): Promise<any> {\r\n        return db.query(`SELECT con.*\r\n        FROM pg_catalog.pg_constraint con\r\n             INNER JOIN pg_catalog.pg_class rel\r\n                        ON rel.oid = con.conrelid\r\n             INNER JOIN pg_catalog.pg_namespace nsp\r\n                        ON nsp.oid = connamespace\r\n        WHERE nsp.nspname = '` + schema + `'\r\n              AND rel.relname = '` + table + `';`)\r\n    }\r\n\r\n    createCommentTable(table: string): Promise<any> {\r\n        return db.query(`CREATE TABLE mycube.c` + table + ` (\r\n            ID   SERIAL PRIMARY KEY,\r\n            userID integer,\r\n            comment text,\r\n            geom geometry,\r\n            featureChange boolean,\r\n            filename text,\r\n            file bytea,\r\n            auto boolean,\r\n            featureID integer,\r\n            createdAt timestamp with time zone default now());\r\n            `)\r\n    }\r\n\r\n    setSRID(table): Promise<any> {\r\n        return db.query(`SELECT UpdateGeometrySRID('mycube', 't` + table + `','geom',4326);`)\r\n    }\r\n\r\n    addColumn(table: string, field: string, type: string, label: boolean, myCubeField: MyCubeField): Promise<any> {\r\n        db.query('ALTER TABLE mycube.t' + table + ' ADD \"' + myCubeField.field + '\" ' + myCubeField.type)\r\n        //if (label == true) { db.query(`COMMENT ON COLUMN mycube.t` + table + '.\"' + field + `\" IS '` + field + `';`) }\r\n        return db.query(\"SELECT col_description(41644,3);\")\r\n\r\n    }\r\n\r\n    deleteColumn(table: string, myCubeField: MyCubeField): Promise<any> {\r\n        return db.query('ALTER TABLE mycube.t' + table + ' DROP \"' + myCubeField.field + '\"')\r\n    }\r\n\r\n    moveColumn(table: string, myCubeField: MyCubeField): Promise<any> {\r\n        let rnd = Math.trunc(Math.random() * 100)\r\n        let promise = new Promise((resolve, reject) => {\r\n            this.mC1(table, myCubeField, rnd).then(() => {\r\n                this.mC2(table, myCubeField, rnd).then(() => {\r\n                    this.mC3(table, myCubeField).then(() => {\r\n                        this.mc4(table, myCubeField, rnd).then(() => { resolve() })\r\n                    }\r\n                    )\r\n                }\r\n                )\r\n            }\r\n            )\r\n        })\r\n        return promise\r\n    }\r\n\r\n    mC1(table: string, myCubeField: MyCubeField, rnd: number): Promise<any> {\r\n        return db.query('ALTER TABLE mycube.t' + table + ' ADD layer' + rnd + ' ' + myCubeField.type)\r\n    }\r\n\r\n    mC2(table: string, myCubeField: MyCubeField, rnd: number): Promise<any> {\r\n        return db.query('UPDATE mycube.t' + table + ' SET layer' + rnd + ' = \"' + myCubeField.field + '\"')\r\n    }\r\n\r\n    mC3(table: string, myCubeField: MyCubeField): Promise<any> {\r\n        return db.query('ALTER TABLE mycube.t' + table + ' DROP \"' + myCubeField.field + '\"')\r\n    }\r\n\r\n    mc4(table: string, myCubeField: MyCubeField, rnd: number): Promise<any> {\r\n        return db.query('ALTER TABLE mycube.t' + table + ' RENAME layer' + rnd + ' TO \"' + myCubeField.field + '\"')\r\n    }\r\n\r\n    updateConstraint(schema: string, table: string, myCubeField: MyCubeField): Promise<any> {\r\n        let promise = new Promise((resolve, reject) => {\r\n            var constraint: string = \"\"\r\n            var i: number = 1\r\n            // this.deleteConstraint(schema, table, myCubeField.field).then(() => {\r\n            if (myCubeField.constraints) {\r\n                myCubeField.constraints.forEach((x) => {\r\n                    if (myCubeField.type == 'integer' || myCubeField.type == 'double precision') { constraint = constraint + '\"' + myCubeField.field + '\"' + \"= \" + x.name }\r\n                    else { constraint = constraint + '\"' + myCubeField.field + '\"' + \"='\" + x.name + \"'\" }\r\n                    if (i < myCubeField.constraints.length) {\r\n                        constraint = constraint + \" OR \"\r\n                    }\r\n                    i = i + 1\r\n                })\r\n                if (constraint) {\r\n                    this.deleteConstraint(schema, table, myCubeField.field).then((result) => {\r\n                        this.addConstraint(schema, table, myCubeField.field, constraint).then((result) => {\r\n                            resolve()\r\n                        })\r\n                    }).catch((error) => {\r\n                        this.addConstraint(schema, table, myCubeField.field, constraint).then((result) => { resolve() })\r\n                    })\r\n                }\r\n                else { resolve() }\r\n\r\n            }\r\n        })\r\n        return promise\r\n    }\r\n\r\n    addConstraint(schema: string, table: string, field: string, constraint: string): Promise<any> {\r\n        //this can fail at times if there is already a constraint\r\n        return db.query('ALTER TABLE ' + schema + '.t' + table + ' ADD CONSTRAINT \"' + field + '_types\" CHECK (' + constraint + ');')\r\n    }\r\n\r\n    deleteConstraint(schema: string, table: string, field: string): Promise<any> {\r\n        return db.query('ALTER TABLE ' + schema + '.t' + table + ' DROP CONSTRAINT ' + field + '_types')\r\n    }\r\n\r\n    deleteTable(table: string): Promise<any> {\r\n        return db.query('DROP TABLE mycube.t' + table)\r\n    }\r\n\r\n    deleteCommentTable(table: string): Promise<any> {\r\n        return db.query('DROP TABLE mycube.c' + table)\r\n    }\r\n\r\n    addRecord(table: string, geometry: string): Promise<any> {\r\n        return db.query(\"INSERT INTO mycube.t\" + table + \" (geom) VALUES (ST_SetSRID(ST_GeomFromGeoJSON('\" + geometry + \"'),4326)) RETURNING id;\")\r\n    }\r\n    addAnyRecord(schema, table, field, value) {\r\n        return db.query(\"INSERT INTO \" + schema + \".\" + table + ' (\"' + field + '\") VALUES (' + value + \") RETURNING id;\")\r\n    }\r\n\r\n    fixGeometry(table: string): Promise<any> {\r\n        let promise = new Promise((resolve, reject) => {\r\n            this.fG1(table).then((x) => {\r\n                console.log(x)\r\n                this.fG2(table).then((y) => {\r\n                    console.log(y)\r\n                    this.fG3(table).then((z) => {\r\n                        console.log(z)\r\n                        this.fG4(table).then((a) => {\r\n                            console.log(a)\r\n                            resolve()\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        })\r\n        return promise\r\n    }\r\n\r\n    fG1(table: string): Promise<any> {\r\n        return db.query(\"ALTER TABLE mycube.t\" + table + \" ADD geom2d geometry;\")\r\n    }\r\n\r\n    fG2(table: string): Promise<any> {\r\n        return db.query(\"UPDATE mycube.t\" + table + \" SET geom2d = ST_Force2D(geom);\")\r\n    }\r\n\r\n    fG3(table: string): Promise<any> {\r\n        return db.query(\"ALTER TABLE mycube.t\" + table + \" DROP geom;\")\r\n    }\r\n\r\n    fG4(table: string): Promise<any> {\r\n        return db.query(\"ALTER TABLE mycube.t\" + table + \" RENAME geom2d TO geom;\")\r\n    }\r\n\r\n    fG5(table: string): Promise<any> {\r\n        return db.query(\"ALTER TABLE mycube.t\" + table + \" ALTER COLUMN geom type geometry(Geometry, 4326);\")\r\n    }\r\n\r\n\r\n    deleteRecord(table: string, id: string): Promise<any> {\r\n        return db.query(\"DELETE FROM mycube.t\" + table + \" WHERE id = '\" + id + \"';\")\r\n    }\r\n\r\n    deleteAnyRecord(schema: string, table: string, id: string): Promise<any> {\r\n        return db.query('DELETE FROM ' + schema + '.\"' + table + '\" WHERE id' + \" = '\" + id + \"';\")\r\n    }\r\n\r\n    getschema(schema: string, table: string): Promise<any> {\r\n        return db.query(`SELECT cols.column_name AS field, cols.data_type as type,\r\n        pg_catalog.col_description(c.oid, cols.ordinal_position::int) as description\r\n        FROM pg_catalog.pg_class c, information_schema.columns cols\r\n        WHERE cols.table_schema = '` + schema + `' AND cols.table_name = '` + table + \"' AND cols.table_name = c.relname\")\r\n    }\r\n    getsingle(table: string, id: string): Promise<any> {\r\n        return db.query(\"SELECT * FROM \" + table + \" WHERE id='\" + id + \"';\")\r\n    }\r\n\r\n    getanysingle(schema: string, table: string, field: string, value: string): Promise<any> {\r\n        return db.query(\"SELECT * FROM \" + schema + '.\"' + table + `\" WHERE \"` + field + `\" = ` + value)\r\n    }\r\n\r\n    getcomments(table: string, id: string): Promise<any> {\r\n        return db.query('SELECT id, userid, comment, geom, filename, auto, featureid, createdat, users.\"firstName\", users.\"lastName\" FROM mycube.c' + table + \"  INNER JOIN users ON mycube.c\" + table + '.userid = users.\"ID\" WHERE mycube.c' + table + \".featureid='\" + id + \"' ORDER BY id DESC;\")\r\n        //return db.query(\"SELECT mycube.c\" + table + '.*, users.\"firstName\", users.\"lastName\" FROM mycube.c' + table + \"  INNER JOIN users ON mycube.c\" + table + '.userid = users.\"ID\" WHERE mycube.c' + table + \".featureid='\" + id + \"';\")\r\n    }\r\n    getSingleLog(schema: string, table: string, id: string): Promise<any> {\r\n        return db.query('SELECT ' + schema + '.\"' + table + '\".*, users.\"firstName\", users.\"lastName\" FROM ' + schema + '.' + table + \"  INNER JOIN users ON \" + schema + \".\" + table + '.userid = users.\"ID\" WHERE ' + schema + '.' + table + \".featureid='\" + id + \"' ORDER BY id DESC;\")\r\n    }\r\n\r\n    addAnyCommentWithoutGeom(comment: App.MyCubeComment): Promise<any> {\r\n        if (comment.geom) {\r\n            let ntext: RegExp = /'/g\r\n            try { comment.comment = comment.comment.replace(ntext, \"''\") }\r\n            catch (error) { }\r\n            return db.query(\"INSERT INTO \" + comment.schema + '.\"' + comment.logTable + '\" (userid, comment, geom, featureid, auto) VALUES (' + comment.userid + \",'\" + comment.comment + \"',(ST_SetSRID(ST_GeomFromGeoJSON('\" + JSON.stringify(comment.geom['geometry']) + \"'),4326)),\" + comment.featureid + \",\" + comment.auto + \")\")\r\n        }\r\n        else {\r\n            return db.query(\"INSERT INTO \" + comment.schema + '.\"' + comment.logTable + '\" (userid, comment, featureid, auto) VALUES (' + comment.userid + \",'\" + comment.comment + \"','\" + comment.featureid + \"',\" + comment.auto + \") RETURNING id;\")\r\n        }\r\n    }\r\n\r\n    addImage(comment: any): Promise<any> {\r\n        return db.query(\"UPDATE \" + comment['body']['schema'] + '.\"' + comment['body']['table'] + '\"' + \" SET file = ?, filename = ? where id ='\" + comment['body']['id'] + \"'\", { replacements: [comment.file.buffer, comment.file.originalname] })\r\n    }\r\n    addAnyImage(comment: any): Promise<any> {\r\n        return db.query('UPDATE ' + comment['body']['table'] + \" SET file = ?, filename = ? where id ='\" + comment['body']['id'] + \"'\", { replacements: [comment.file.buffer, comment.file.originalname] })\r\n    }\r\n    getImage(table, id): Promise<any> {\r\n        return db.query(\"SELECT filename, file FROM mycube.c\" + table + \" WHERE id=\" + id)\r\n    }\r\n    getAnyImage(schema, table, id): Promise<any> {\r\n        return db.query('SELECT filename, file FROM \"' + schema + '\".\"' + table + '\" WHERE id=' + id)\r\n    }\r\n    deleteComment(table: string, id: string): Promise<any> {\r\n        return db.query(\"DELETE FROM mycube.c\" + table + ' WHERE id=' + id + \";\")\r\n    }\r\n    update(table: string, id: string, field: string, type: string, value: any) {\r\n        switch (type) {\r\n            case \"integer\": {\r\n                return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = ' + value + \" WHERE id='\" + id + \"';\")\r\n            }\r\n            case \"double precision\": {\r\n                return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = ' + value + \" WHERE id='\" + id + \"';\")\r\n            }\r\n            case \"text\": {\r\n                if (value == null) {\r\n                    return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = NULL WHERE \"' + \"id='\" + id + \"';\")\r\n                }\r\n                else {\r\n                    return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = ' + \"'\" + value + \"' WHERE \" + \"id='\" + id + \"';\")\r\n                }\r\n            }\r\n            case \"boolean\": {\r\n                return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = ' + value + \" WHERE id='\" + id + \"';\")\r\n            }\r\n            case \"date\": {\r\n                if (value) {\r\n                    return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = ' + \"'\" + value + \"' WHERE id='\" + id + \"';\")\r\n                }\r\n                else {\r\n                    return db.query(\"UPDATE mycube.t\" + table + ' SET \"' + field + '\" = ' + \"null WHERE id='\" + id + \"';\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateAnyRecord(schema: string, table: string, id: string, field: string, type: string, value: any) {\r\n        switch (type) {\r\n            case \"integer\": {\r\n                return db.query(\"UPDATE \" + schema + \".\" + table + ' SET \"' + field + '\" = ' + value + \" WHERE id='\" + id + \"';\")\r\n            }\r\n            case \"double precision\": {\r\n                return db.query(\"UPDATE \" + schema + \".\" + table + ' SET \"' + field + '\" = ' + value + \" WHERE id='\" + id + \"';\")\r\n            }\r\n            case \"character varying\":\r\n            case \"text\": {\r\n                if (value == null) {\r\n                    return db.query(\"UPDATE \" + schema + \".\" + table + ' SET \"' + field + '\" = NULL WHERE \"' + \"id='\" + id + \"';\")\r\n                }\r\n                else {\r\n                    let ntext: RegExp = /'/g\r\n                    try { value = value.replace(ntext, \"''\") }\r\n                    catch (error) { }\r\n                    return db.query(\"UPDATE \" + schema + \".\" + table + ' SET \"' + field + '\" = ' + \"'\" + value + \"' WHERE \" + \"id='\" + id + \"';\")\r\n                }\r\n            }\r\n            case \"boolean\": {\r\n                return db.query(\"UPDATE \" + schema + \".\" + table + ' SET \"' + field + '\" = ' + value + \" WHERE id='\" + id + \"';\")\r\n            }\r\n            case \"date\": {\r\n                if (value) {\r\n                    return db.query(\"UPDATE \" + schema + \".\" + table + ' SET \"' + field + '\" = ' + \"'\" + value + \"' WHERE id='\" + id + \"';\")\r\n                }\r\n                else {\r\n                    return db.query(\"UPDATE \" + schema + \".\" + table + ' SET \"' + field + '\" = ' + \"null WHERE id='\" + id + \"';\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getOID(table: string) {\r\n        return db.query(\"SELECT attrelid FROM pg_attribute WHERE attrelid = 'mycube.t\" + table + \"'::regclass;\")\r\n    }\r\n\r\n    getColumnCount(table: string) {\r\n        return db.query(\"select count(column_name) from information_schema.columns where table_name='t\" + table + \"';\")\r\n        //return db.query(\"select count(*) from information_schema.columns where table_name='mycube.t\" + table + \"';\")\r\n    }\r\n\r\n    getIsLabel(oid: number, field: number) {\r\n        return db.query(\"SELECT col_description(\" + oid + \",\" + field + \");\")\r\n    }\r\n}\r\n\r\nexport = SQLService;"]}