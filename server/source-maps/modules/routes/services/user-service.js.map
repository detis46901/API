{"version":3,"sources":["modules/routes/services/user-service.ts"],"names":[],"mappings":";AAAA,IAAO,SAAS,WAAW,WAAW,CAAC,CAAC;AACxC,IAAO,SAAS,WAAW,sBAAsB,CAAC,CAAC;AAGnD;IAAA;IAuDA,CAAC;IArDG,6BAAO,GAAP,UAAQ,WAAmB;QAEvB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,UAAU;aACb;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,WAAW,CAAC,KAAK,GAAG;gBAChB,GAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,GAAE;oBACf,EAAE,SAAS,EAAE,UAAE,GAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,GAAE,MAAI,WAAW,MAAG,KAAE,EAAE;oBAC3D,EAAE,QAAQ,EAAE,UAAE,GAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,GAAE,MAAI,WAAW,MAAG,KAAE,EAAE;oBAC1D,EAAE,KAAK,EAAE,UAAE,GAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,GAAE,MAAI,WAAW,MAAG,KAAE,EAAE;iBAC1D;;aACJ,CAAA;QACL,CAAC;QAED,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;;IAChD,CAAC;IAED,yBAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED,4BAAM,GAAN,UAAO,OAAiB;QACpB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,4BAAM,GAAN,UAAO,OAAiB;QACpB,MAAM,CAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,YAAY;YAEhE,YAAY,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YAC3C,YAAY,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YACzC,YAAY,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YACnC,YAAY,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YACrC,YAAY,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;YACnD,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnB,YAAY,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YAC7C,CAAC;YAED,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,4BAAM,GAAN,UAAO,EAAU;QACb,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,YAAY;YAElD,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QAElC,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,kBAAC;AAAD,CAvDA,AAuDC,IAAA;AAED,iBAAS,WAAW,CAAC","file":"../../../../modules/routes/services/user-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport UserModel = require('../models/user-model');\r\nimport bcrypt = require('bcrypt');\r\n\r\nclass UserService {\r\n\r\n    getList(searchValue: string): Promise<UserModel.UserInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'lastName'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                [Sequelize.Op.or]: [\r\n                    { firstName: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n                    { lastName: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n                    { email: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return UserModel.model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<UserModel.UserInstance> {\r\n        return UserModel.model.findByPk(rowID);\r\n    }\r\n\r\n    create(request: App.User): Promise<UserModel.UserInstance> {\r\n        return UserModel.model.create(request);\r\n    }\r\n\r\n    update(request: App.User): Promise<UserModel.UserInstance> {\r\n        return <any>(UserModel.model.findByPk(request.ID).then((UserInstance) => {\r\n\r\n            UserInstance.firstName = request.firstName;\r\n            UserInstance.lastName = request.lastName;\r\n            UserInstance.email = request.email;\r\n            UserInstance.active = request.active;\r\n            UserInstance.administrator = request.administrator;\r\n            if (request.password) {\r\n                UserInstance.password = request.password;\r\n            }\r\n\r\n            return UserInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n        return UserModel.model.findByPk(ID).then((UserInstance) => {\r\n\r\n            return UserInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = UserService;"]}