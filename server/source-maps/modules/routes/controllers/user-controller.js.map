{"version":3,"sources":["modules/routes/controllers/user-controller.ts"],"names":[],"mappings":"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","file":"../../../../modules/routes/controllers/user-controller.js","sourcesContent":["import UserService = require('../services/user-service');\r\nimport UserModel = require('../models/user-model');\r\nimport sequalizeModel = require(\"../models/user-model\");\r\nimport Sequelize = require('sequelize');\r\nimport token_auth = require('../../JWT_Checker/loginToken')\r\nimport GroupMemberModel = require('../models/group-member-model')\r\nimport {environment} from '../../../core/environment'\r\n\r\nvar express = require('express');\r\nvar jwt = require('jsonwebtoken');\r\nvar bcrypt = require('bcrypt');\r\nvar router = express.Router();\r\nvar service = new UserService();\r\n\r\nrouter.get('/test', (req, res) => {\r\n    console.log('testing')\r\n    res.send('Test Passed')\r\n})\r\nrouter.get('/list', token_auth, (req, res) => {\r\n    service.getList(req.query.searchValue).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n    \r\n});\r\n\r\nrouter.get('/one', token_auth, (req, res) => {\r\n    var User = <number>req.query.rowid;\r\n    \r\n    service.get(User).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n\r\n});\r\n\r\n//1/3/18: Robust way to do /create and /login\r\nrouter.post('/create', token_auth, (req, res) => {\r\n    var request = <App.User>req.body;\r\n    UserModel.Model.findAll({\r\n        where: { email: request.email}\r\n    }).then(user => {\r\n        if(user.length >= 1) {\r\n            return res.status(422).json({\r\n                message: \"User already exists.\"\r\n            })\r\n        } else {\r\n            bcrypt.hash(request.password, 10, (err, hash) => {\r\n                if (err) {\r\n                    return res.status(500).json({\r\n                        error:err,\r\n                        message:\"Hash failed.\"\r\n                    })\r\n                } else {\r\n                    request.password = hash\r\n                    service.create(request)\r\n                    .then(result => {\r\n                        res.status(201).json({\r\n                            message: \"User created.\"\r\n                        })\r\n                    }).catch(err => {\r\n                        res.status(500).json({\r\n                            error:err,\r\n                            message:\"User could not be created. Check email to ensure it is in the correct format.\"\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        }\r\n    }).catch(err => {\r\n        res.status(500).json({\r\n            message:\"Model could not be created.\",\r\n            error:err\r\n        })\r\n    })\r\n});\r\n\r\nrouter.put('/updatePassword', token_auth, (req, res) => {\r\n    bcrypt.compare(req.body.oldPassword, req.body.password, (err, result) => {\r\n        if(err) { //bcrypt hashing error\r\n            return res.status(500).json({\r\n                message: 'bcrypt hash comparison failure. Try again in a few minutes.'\r\n            })\r\n        } else if(result) {\r\n            bcrypt.hash(req.body.newPassword, 10, (err, hash) => {\r\n                if(err) {\r\n                    return res.status(500).json({\r\n                        error:err,\r\n                        message:\"Hash failed.\"\r\n                    })\r\n                } else {\r\n                    req.body.password = hash\r\n                    req.body.currUser.password = hash\r\n                    service.update(<App.User>req.body.currUser)\r\n                    .then(result => {\r\n                        res.status(204).json({\r\n                            message: \"Hash compare successful. Password updated.\",\r\n                            user: req.body.currUser\r\n                        })\r\n                    }).catch(err => {\r\n                        res.status(500).json({\r\n                            error:err,\r\n                            message:\"Password could not be changed.\"\r\n                        })\r\n                    })\r\n                }\r\n            })          \r\n        } else if(!result) {\r\n            return res.status(401).json({\r\n                message: 'Authorization failed.'\r\n            })\r\n        }\r\n    })\r\n})\r\n\r\nrouter.post('/login', (req, res) => {\r\n    UserModel.Model.findAll({\r\n        where: {email: req.body.email}\r\n    }).then(user => {\r\n        if(user.length < 1) { //If supplied email is not found as a user in the database\r\n            return res.status(404).json({\r\n                message: 'User not found.'\r\n            })\r\n        }\r\n        bcrypt.compare(req.body.password, user[0].password, (err, result) => {\r\n            if(err) { //bcrypt hashing error\r\n                return res.status(500).json({\r\n                    message: 'bcrypt hash comparison failure. Try again in a few minutes.'\r\n                })\r\n            } else if(result) { //If input pw hash matches db pw hash\r\n                const login_token = jwt.sign(\r\n                    {\r\n                        email: user[0].email,\r\n                        ID: user[0].ID\r\n                    }, \r\n                    environment.JWT_SECRET_KEY,\r\n                    {\r\n                        expiresIn: \"30 days\"\r\n                        //expiresIn: \"10s\" //testing\r\n                    }\r\n                );\r\n                return res.status(200).json({\r\n                    message: \"Token granted.\",\r\n                    token: login_token,\r\n                    userID: user[0].ID,\r\n                    admin: user[0].administrator,\r\n                    firstName: user[0].firstName,\r\n                    lastName: user[0].lastName\r\n                });\r\n            } else if(!result) { //If hash comparison does not match\r\n                return res.status(401).json({\r\n                    message: 'Authorization failed.'\r\n                })\r\n            }\r\n        })   \r\n    }).catch(err => {\r\n        return res.status(500).json({\r\n            error:err\r\n        })\r\n    });\r\n});\r\n\r\n//This request generates an API key (JWT) to be used for Google Earth KML files and such. Not to be confused with login \"session\" JWT above.\r\nrouter.post('/generatekey', token_auth, (req, res) => {\r\n    UserModel.Model.findAll({\r\n        where: {email: req.body.email}\r\n    }).then(user => {\r\n        if(user.length < 1) { //If supplied email is not found as a user in the database\r\n            return res.status(404).json({\r\n                message: 'User not found.'\r\n            })\r\n        }\r\n        bcrypt.compare(req.body.password, user[0].password, (err, result) => {\r\n            if(err) { //bcrypt hashing error\r\n                return res.status(500).json({\r\n                    message: 'bcrypt hash comparison failed.'//1/11/18 erroring here\r\n                })\r\n            }\r\n            if(result) {\r\n                const api_token = jwt.sign(\r\n                    {\r\n                        email: user[0].email,\r\n                        firstName: user[0].firstName, //Use first+last name combo instead of ID to ensure key is different than login key\r\n                        lastName: user[0].lastName\r\n                    }, \r\n                    environment.JWT_SECRET_KEY,\r\n                    {\r\n                        expiresIn: \"30 days\"\r\n                    }\r\n                );\r\n                return res.status(200).json({\r\n                    message: \"Token granted.\",\r\n                    token: api_token,\r\n                    userID: user[0].ID,\r\n                    admin: user[0].administrator\r\n                });\r\n            } else if(!result) { //If hash comparison does not match\r\n                return res.status(401).json({\r\n                    message: 'Authorization failed.'\r\n                })\r\n            }\r\n        })   \r\n    }).catch(err => {\r\n        return res.status(500).json({\r\n            error:err\r\n        })\r\n    });\r\n})\r\n\r\nrouter.put('/update', token_auth, (req, res) => {\r\n    var request = <App.User>req.body;\r\n\r\n    service.update(request).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n\r\n});\r\n\r\nrouter.delete('/delete', token_auth, (req, res) => {\r\n    var ID = <number>req.query.ID;\r\n\r\n    service.delete(ID).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n\r\n});\r\n\r\nexport = router;"]}