{"version":3,"sources":["modules/layers/services/servers-service.ts"],"names":[],"mappings":";AACA,IAAO,WAAW,WAAW,yBAAyB,CAAC,CAAC;AAGxD;IAAA;IAmDA,CAAC;IAjDG,+BAAO,GAAP,UAAQ,QAAgB;QAEpB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,IAAI;aACP;SACJ,CAAC;QAEF,kBAAkB;QAClB,4BAA4B;QAC5B,gCAAgC;QAChC,oCAAoC;QACpC,YAAY;QACZ,QAAQ;QACR,IAAI;QAEJ,2CAA2C;QAC3C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAClD,CAAC;IAED,2BAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED,8BAAM,GAAN,UAAO,OAAmB;QACtB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED,8BAAM,GAAN,UAAO,OAAmB;QAEtB,MAAM,CAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,cAAc;YAEpE,cAAc,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;YAC/C,cAAc,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;YAC/C,cAAc,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YAE7C,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,8BAAM,GAAN,UAAO,EAAU;QAEb,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,cAAc;YAEtD,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAEpC,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,oBAAC;AAAD,CAnDA,AAmDC,IAAA;AAED,iBAAS,aAAa,CAAC","file":"../../../../modules/layers/services/servers-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport ServerModel = require('../models/servers-model');\r\n\r\n\r\nclass ServerService {\r\n\r\n    getList(ServerID: number): Promise<ServerModel.ServerInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        // if (ServerID) {\r\n        //     findOptions.where = {\r\n        //         [Sequelize.Op.and]: [\r\n        //             { ServerID: ServerID}\r\n        //         ]\r\n        //     }\r\n        // }\r\n\r\n        //findOptions.include = [ServerModel.Model]\r\n        return ServerModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<ServerModel.ServerInstance> {\r\n        return ServerModel.Model.findByPk(rowID);\r\n    }\r\n\r\n    create(request: App.Server): Promise<ServerModel.ServerInstance> {\r\n        return ServerModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.Server): Promise<ServerModel.ServerInstance> {\r\n        \r\n        return <any>(ServerModel.Model.findByPk(request.ID).then((ServerInstance) => {\r\n\r\n            ServerInstance.serverName = request.serverName;\r\n            ServerInstance.serverType = request.serverType;\r\n            ServerInstance.serverURL = request.serverURL;\r\n\r\n            return ServerInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n\r\n        return ServerModel.Model.findByPk(ID).then((ServerInstance) => {\r\n\r\n            return ServerInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = ServerService;"]}