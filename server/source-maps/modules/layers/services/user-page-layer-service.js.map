{"version":3,"sources":["modules/layers/services/user-page-layer-service.ts"],"names":[],"mappings":"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","file":"../../../../modules/layers/services/user-page-layer-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport UserPageLayerModel = require('../models/user-page-layer-model');\r\nimport PageModel = require('../../users/models/page-model')\r\nimport LayerModel = require('../models/layers-admin-model')\r\nimport ServerModel = require ('../models/servers-model')\r\n\r\nclass UserPageLayerService {\r\n\r\n    getList(pageID: number): Promise<UserPageLayerModel.UserPageLayerInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'rowID'\r\n            ]\r\n        };\r\n\r\n        if (pageID) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    { pageID: pageID}\r\n                ]\r\n            }\r\n        }\r\n\r\n        return UserPageLayerModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    \r\n    getPageLayers(pageID: number): any {\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (pageID) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    { userPageID: pageID}\r\n                ]\r\n            }\r\n        }\r\n\r\n\r\n    \r\n        findOptions.include = [PageModel.Model, LayerModel.Model]\r\n\r\n        return UserPageLayerModel.Model.findAll({order: ['ID']/*, where: {$and: [{ userPageID: pageID}]}*/, include: [{model: PageModel.Model}, {model: LayerModel.Model, include: [ServerModel.Model]}]})\r\n    }\r\n\r\n    getUserLayer(userID: number): Promise<UserPageLayerModel.UserPageLayerInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'rowID'\r\n            ]\r\n        };\r\n\r\n        if (userID) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    { userID: userID}\r\n                ]\r\n            }\r\n        }\r\n\r\n        return UserPageLayerModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<UserPageLayerModel.UserPageLayerInstance> {\r\n        return UserPageLayerModel.Model.findById(rowID);\r\n    }\r\n\r\n    create(request: App.UserPageLayer): Promise<UserPageLayerModel.UserPageLayerInstance> {\r\n        return UserPageLayerModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.UserPageLayer): Promise<UserPageLayerModel.UserPageLayerInstance> {\r\n        \r\n        return <any>(UserPageLayerModel.Model.findById(request.ID).then((UserPageLayerInstance) => {\r\n\r\n            UserPageLayerInstance.layerAdminID = request.layerAdminID;\r\n            UserPageLayerInstance.userID = request.userID;\r\n            UserPageLayerInstance.layerON = request.layerON;\r\n\r\n            return UserPageLayerInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n\r\n        return UserPageLayerModel.Model.findById(ID).then((UserPageLayerInstance) => {\r\n\r\n            return UserPageLayerInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = UserPageLayerService;"]}