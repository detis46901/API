{"version":3,"sources":["modules/layers/services/user-page-layer-service.ts"],"names":[],"mappings":"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","file":"../../../../modules/layers/services/user-page-layer-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport UserPageLayerModel = require('../models/user-page-layer-model');\r\nimport PageModel = require('../../users/models/page-model')\r\nimport LayerModel = require('../models/layers-model')\r\nimport ServerModel = require ('../models/servers-model')\r\nimport UserModel = require('../../users/models/user-model');\r\nimport UserPageInstanceModel = require('../../feature modules/models/user-page-instance-model')\r\nimport ModuleInstanceModel = require ('../../../modules/feature modules/models/module-instances-model');\r\n\r\n\r\nclass UserPageLayerService {\r\n\r\n    getList(pageID: number): Promise<UserPageLayerModel.UserPageLayerInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (pageID) {\r\n            findOptions.where = {\r\n                [Sequelize.Op.and]: [\r\n                    { pageID: pageID}\r\n                ]\r\n            }\r\n        }\r\n\r\n        return UserPageLayerModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    \r\n    getPageLayers(pageID: number): any {\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'layerOrder'\r\n            ]\r\n        };\r\n\r\n        if (pageID) {\r\n            findOptions.where = {\r\n                [Sequelize.Op.and]: [\r\n                    { userPageID: pageID}\r\n                ]\r\n            }\r\n        }\r\n\r\n\r\n    \r\n        findOptions.include = [PageModel.Model, LayerModel.Model, UserPageInstanceModel.Model]\r\n\r\n        return UserPageLayerModel.Model.findAll({order: ['layerOrder'], where: {[Sequelize.Op.and]: [{ userPageID: pageID}]}, include: [{model: PageModel.Model}, {model: UserPageInstanceModel.Model, include: [ModuleInstanceModel.Model]}, {model: LayerModel.Model, include: [ServerModel.Model]}]})\r\n    }\r\n\r\n    getUserLayer(userID: number): any {\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'userID'\r\n            ]\r\n        };\r\n\r\n        if (userID) {\r\n            findOptions.where = {\r\n                [Sequelize.Op.and]: [\r\n                    { userID: userID}\r\n                ]\r\n            }\r\n        }\r\n\r\n        //return UserPageLayerModel.Model.findAll({order: ['ID'], where: {[Sequelize.Op.and]: [{ userID: userID}]}, include: [{model: UserModel.Model}, {model: LayerModel.Model}, {model: PageModel.Model}]});\r\n        return UserPageLayerModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    getByLayer(layerID: number): any {\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'layerID'\r\n            ]\r\n        };\r\n\r\n        if (layerID) {\r\n            findOptions.where = {\r\n                [Sequelize.Op.and]: [\r\n                    {layerID: layerID}\r\n                ]\r\n            }\r\n        }\r\n\r\n        return UserPageLayerModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<UserPageLayerModel.UserPageLayerInstance> {\r\n        return UserPageLayerModel.Model.findByPk(rowID);\r\n    }\r\n\r\n    create(request: App.UserPageLayer): Promise<UserPageLayerModel.UserPageLayerInstance> {\r\n        return UserPageLayerModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.UserPageLayer): Promise<UserPageLayerModel.UserPageLayerInstance> {\r\n        \r\n        return <any>(UserPageLayerModel.Model.findByPk(request.ID).then((UserPageLayerInstance) => {\r\n\r\n            UserPageLayerInstance.layerID = request.layerID;\r\n            UserPageLayerInstance.userID = request.userID;\r\n            UserPageLayerInstance.defaultON = request.defaultON;\r\n            UserPageLayerInstance.style = request.style;\r\n            UserPageLayerInstance.layerOrder = request.layerOrder\r\n\r\n            return UserPageLayerInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n        return UserPageLayerModel.Model.findByPk(ID).then((UserPageLayerInstance) => {\r\n\r\n            return UserPageLayerInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = UserPageLayerService;"]}