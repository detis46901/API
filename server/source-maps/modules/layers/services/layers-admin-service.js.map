{"version":3,"sources":["modules/layers/services/layers-admin-service.ts"],"names":[],"mappings":";AACA,IAAO,eAAe,WAAW,8BAA8B,CAAC,CAAC;AAGjE;IAAA;IAuDA,CAAC;IArDG,mCAAO,GAAP,UAAQ,WAAmB;QAEvB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,IAAI;aACP;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,WAAW,CAAC,KAAK,GAAG;gBAChB,GAAG,EAAE;oBACD,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;oBAC7C,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;oBAC5C,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;iBAC5C;aACJ,CAAA;QACL,CAAC;QAED,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACtD,CAAC;IAED,+BAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IAED,kCAAM,GAAN,UAAO,OAAuB;QAC1B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAED,kCAAM,GAAN,UAAO,OAAuB;QAE1B,MAAM,CAAM,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,kBAAkB;YAE5E,kBAAkB,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YACjD,kBAAkB,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YACjD,kBAAkB,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YAC/C,kBAAkB,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;YACnD,kBAAkB,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YACrD,kBAAkB,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;YAE/D,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,kCAAM,GAAN,UAAO,KAAa;QAEhB,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,kBAAkB;YAEjE,MAAM,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;QAExC,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,wBAAC;AAAD,CAvDA,AAuDC,IAAA;AAED,iBAAS,iBAAiB,CAAC","file":"../../../../modules/layers/services/layers-admin-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport LayerAdminModel = require('../models/layers-admin-model');\r\n\r\n\r\nclass LayerAdminService {\r\n\r\n    getList(searchValue: string): Promise<LayerAdminModel.LayerAdminInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                $or: [\r\n                    { firstName: { $iLike: `%${searchValue}%` } },\r\n                    { lastName: { $iLike: `%${searchValue}%` } },\r\n                    { email: { $iLike: `%${searchValue}%` } },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return LayerAdminModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<LayerAdminModel.LayerAdminInstance> {\r\n        return LayerAdminModel.Model.findById(rowID);\r\n    }\r\n\r\n    create(request: App.LayerAdmin): Promise<LayerAdminModel.LayerAdminInstance> {\r\n        return LayerAdminModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.LayerAdmin): Promise<LayerAdminModel.LayerAdminInstance> {\r\n        \r\n        return <any>(LayerAdminModel.Model.findById(request.ID).then((LayerAdminInstance) => {\r\n\r\n            LayerAdminInstance.layerName = request.layerName;\r\n            LayerAdminInstance.layerType = request.layerType;\r\n            LayerAdminInstance.layerURL = request.layerURL;\r\n            LayerAdminInstance.layerIdent = request.layerIdent;\r\n            LayerAdminInstance.layerFormat = request.layerFormat;\r\n            LayerAdminInstance.layerDescription = request.layerDescription;\r\n\r\n            return LayerAdminInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(rowID: number) {\r\n\r\n        return LayerAdminModel.Model.findById(rowID).then((LayerAdminInstance) => {\r\n\r\n            return LayerAdminInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = LayerAdminService;"]}