{"version":3,"sources":["modules/feature modules/services/layers-permission-service.ts"],"names":[],"mappings":"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","file":"../../../../modules/feature modules/services/layers-permission-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport LayerPermissionModel = require('../models/layers-permission-model');\r\nimport LayerModel = require('../models/layers-model')\r\nimport UserModel = require('../../users/models/user-model')\r\nimport GroupModel = require('../../users/models/group-model')\r\nconst Op = Sequelize.or\r\n\r\n\r\nclass LayerPermissionService {\r\n    getList(): Promise<LayerPermissionModel.LayerPermissionInstance[]> {\r\n        return LayerPermissionModel.Model.findAll();\r\n    }\r\n    \r\n    getByLayer(layerID: number): Promise<LayerPermissionModel.LayerPermissionInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (layerID) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    { layerID: layerID}\r\n                ]\r\n            }\r\n        }\r\n\r\n        findOptions.include = [LayerModel.Model, UserModel.Model, GroupModel.Model];\r\n        return LayerPermissionModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    getByUser(userID: number): Promise<LayerPermissionModel.LayerPermissionInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (userID) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    { userID: userID}\r\n                ]\r\n            }\r\n        }\r\n\r\n        findOptions.include = [LayerModel.Model, UserModel.Model, GroupModel.Model];\r\n        return LayerPermissionModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    getByGroup(groupID: number): Promise<LayerPermissionModel.LayerPermissionInstance[]> {\r\n        console.log(groupID)\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (groupID) {\r\n            findOptions.where = {\r\n                $and: [\r\n                    { groupID: groupID}\r\n                ]\r\n            }\r\n        }\r\n\r\n        findOptions.include = [LayerModel.Model, UserModel.Model, GroupModel.Model];\r\n        return LayerPermissionModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    getByUserAndGroup(userID: number, groups:number[]): Promise<LayerPermissionModel.LayerPermissionInstance[]> {\r\n        const op = Sequelize.or\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        }\r\n\r\n        if (userID) {\r\n            findOptions.where = {\r\n                $or: [\r\n                {groupID: {$or:[groups]}},\r\n                {userID: userID}\r\n        ]}\r\n        }\r\n\r\n        findOptions.include = [LayerModel.Model, UserModel.Model, GroupModel.Model];\r\n        return LayerPermissionModel.Model.findAll(findOptions)\r\n    }\r\n\r\n    get(ID: number): Promise<LayerPermissionModel.LayerPermissionInstance> {\r\n        return LayerPermissionModel.Model.findById(ID);\r\n    }\r\n\r\n    create(request: App.LayerPermission): Promise<LayerPermissionModel.LayerPermissionInstance> {\r\n        return LayerPermissionModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.LayerPermission): Promise<LayerPermissionModel.LayerPermissionInstance> {\r\n        \r\n        return <any>(LayerPermissionModel.Model.findById(request.ID).then((LayerPermissionInstance) => {\r\n\r\n            //Probably should disallow foreign key editing. Create new entry if need new user/layer permission.\r\n            //LayerPermissionInstance.layerID = request.layerID;\r\n            //LayerPermissionInstance.userID = request.userID;\r\n\r\n            LayerPermissionInstance.edit = request.edit;\r\n            LayerPermissionInstance.delete = request.delete;\r\n            LayerPermissionInstance.owner = request.owner;\r\n            LayerPermissionInstance.canGrant = request.canGrant;\r\n            LayerPermissionInstance.grantedBy = request.grantedBy;\r\n            LayerPermissionInstance.comments = request.comments;\r\n\r\n            return LayerPermissionInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n\r\n        return LayerPermissionModel.Model.findById(ID).then((LayerPermissionInstance) => {\r\n            return LayerPermissionInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = LayerPermissionService;"]}