{"version":3,"sources":["modules/feature modules/services/module-instances-service.ts"],"names":[],"mappings":";AAAA,IAAO,SAAS,WAAW,WAAW,CAAC,CAAC;AACxC,IAAO,oBAAoB,WAAW,kCAAkC,CAAC,CAAC;AAC1E,IAAO,WAAW,WAAW,wBAAwB,CAAC,CAAA;AAGtD;IAAA;IAsDA,CAAC;IArDG,wCAAO,GAAP,UAAQ,WAAmB;QAEvB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,IAAI;aACP;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,WAAW,CAAC,KAAK,GAAG;gBAChB,GAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,GAAE;oBACf,EAAE,SAAS,EAAE,UAAE,GAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,GAAE,MAAI,WAAW,MAAG,KAAE,EAAE;oBAC3D,EAAE,QAAQ,EAAE,UAAE,GAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,GAAE,MAAI,WAAW,MAAG,KAAE,EAAE;oBAC1D,EAAE,KAAK,EAAE,UAAE,GAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,GAAE,MAAI,WAAW,MAAG,KAAE,EAAE;iBAC1D;;aACJ,CAAA;QACL,CAAC;QAED,WAAW,CAAC,OAAO,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;;IAC3D,CAAC;IAED,oCAAG,GAAH,UAAI,KAAa;QACb,IAAI,WAAW,GAA0B,EAAE,CAAA;QAC3C,WAAW,CAAC,OAAO,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IACnE,CAAC;IAED,uCAAM,GAAN,UAAO,OAA4B;QAC/B,IAAI,WAAW,GAA0B,EAAE,CAAA;QAC3C,WAAW,CAAC,OAAO,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IACnE,CAAC;IAED,uCAAM,GAAN,UAAO,OAA4B;QAE/B,MAAM,CAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,cAAc;YAE7E,cAAc,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACnC,cAAc,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YACjD,cAAc,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;YAC1C,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,uCAAM,GAAN,UAAO,EAAU;QAEb,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,cAAc;YAC/D,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAEpC,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,6BAAC;AAAD,CAtDA,AAsDC,IAAA;AAED,iBAAS,sBAAsB,CAAC","file":"../../../../modules/feature modules/services/module-instances-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport ModuleInstancesModel = require('../models/module-instances-model');\r\nimport ModuleModel = require('../models/module-model')\r\n\r\n\r\nclass ModuleInstancesService {\r\n    getList(searchValue: string): Promise<ModuleInstancesModel.ModuleInstancesInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                [Sequelize.Op.or]: [\r\n                    { firstName: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n                    { lastName: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n                    { email: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        findOptions.include = [ModuleModel.Model];\r\n        return ModuleInstancesModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<ModuleInstancesModel.ModuleInstancesInstance> {\r\n        var findOptions: Sequelize.FindOptions = {}\r\n        findOptions.include = [ModuleModel.Model];\r\n        return ModuleInstancesModel.Model.findByPk(rowID, findOptions);\r\n    }\r\n\r\n    create(request: App.ModuleInstances): Promise<ModuleInstancesModel.ModuleInstancesInstance> {\r\n        var findOptions: Sequelize.FindOptions = {}\r\n        findOptions.include = [ModuleModel.Model];\r\n        return ModuleInstancesModel.Model.create(request, findOptions);\r\n    }\r\n\r\n    update(request: App.ModuleInstances): Promise<ModuleInstancesModel.ModuleInstancesInstance> {\r\n        \r\n        return <any>(ModuleInstancesModel.Model.findByPk(request.ID).then((ModuleInstance) => {\r\n\r\n            ModuleInstance.name = request.name;\r\n            ModuleInstance.description = request.description;\r\n            ModuleInstance.settings = request.settings\r\n            return ModuleInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n\r\n        return ModuleInstancesModel.Model.findByPk(ID).then((ModuleInstance) => {\r\n            return ModuleInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = ModuleInstancesService;"]}