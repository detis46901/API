{"version":3,"sources":["modules/feature modules/services/module-instances-service.ts"],"names":[],"mappings":";AACA,IAAO,oBAAoB,WAAW,kCAAkC,CAAC,CAAC;AAG1E;IAAA;IAgDA,CAAC;IA/CG,wCAAO,GAAP,UAAQ,WAAmB;QAEvB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,IAAI;aACP;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,WAAW,CAAC,KAAK,GAAG;gBAChB,GAAG,EAAE;oBACD,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;oBAC7C,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;oBAC5C,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,MAAI,WAAW,MAAG,EAAE,EAAE;iBAC5C;aACJ,CAAA;QACL,CAAC;QAED,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC3D,CAAC;IAED,oCAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;IAED,uCAAM,GAAN,UAAO,OAA4B;QAC/B,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IAED,uCAAM,GAAN,UAAO,OAAmB;QAEtB,MAAM,CAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,cAAc;YAE7E,cAAc,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACnC,cAAc,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YACjD,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,uCAAM,GAAN,UAAO,EAAU;QAEb,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,cAAc;YAC/D,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAEpC,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,6BAAC;AAAD,CAhDA,AAgDC,IAAA;AAED,iBAAS,sBAAsB,CAAC","file":"../../../../modules/feature modules/services/module-instances-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport ModuleInstancesModel = require('../models/module-instances-model');\r\n\r\n\r\nclass ModuleInstancesService {\r\n    getList(searchValue: string): Promise<ModuleInstancesModel.ModuleInstancesInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'ID'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                $or: [\r\n                    { firstName: { $iLike: `%${searchValue}%` } },\r\n                    { lastName: { $iLike: `%${searchValue}%` } },\r\n                    { email: { $iLike: `%${searchValue}%` } },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return ModuleInstancesModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<ModuleInstancesModel.ModuleInstancesInstance> {\r\n        return ModuleInstancesModel.Model.findById(rowID);\r\n    }\r\n\r\n    create(request: App.ModuleInstances): Promise<ModuleInstancesModel.ModuleInstancesInstance> {\r\n        return ModuleInstancesModel.Model.create(request);\r\n    }\r\n\r\n    update(request: App.Module): Promise<ModuleInstancesModel.ModuleInstancesInstance> {\r\n        \r\n        return <any>(ModuleInstancesModel.Model.findById(request.ID).then((ModuleInstance) => {\r\n\r\n            ModuleInstance.name = request.name;\r\n            ModuleInstance.description = request.description;\r\n            return ModuleInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(ID: number) {\r\n\r\n        return ModuleInstancesModel.Model.findById(ID).then((ModuleInstance) => {\r\n            return ModuleInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = ModuleInstancesService;"]}