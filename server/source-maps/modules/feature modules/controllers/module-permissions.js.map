{"version":3,"sources":["modules/feature modules/controllers/module-permissions.ts"],"names":[],"mappings":";AAAA,IAAO,uBAAuB,WAAW,uCAAuC,CAAC,CAAC;AAClF,IAAO,kBAAkB,WAAW,2CAA2C,CAAC,CAAC;AAIjF;IAAA;QACW,kBAAa,GAAG,IAAI,KAAK,EAAO,CAAC;QACjC,uBAAkB,GAAG,IAAI,kBAAkB,CAAA;QAC3C,4BAAuB,GAAG,IAAI,uBAAuB,CAAA;IAgBhE,CAAC;IAdU,0CAAc,GAArB,UAAsB,MAAM;QAA5B,iBAaC;QAZG,IAAI,MAAM,GAAG,IAAI,KAAK,EAAU,CAAC;QACjC,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACtC,KAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;gBAClD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACjC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;gBAClC,CAAC;gBACD,KAAI,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;oBACtE,OAAO,CAAC,KAAK,CAAC,CAAA;gBAClB,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,OAAO,CAAA;IAClB,CAAC;IACL,wBAAC;AAAD,CAnBA,AAmBC,IAAA;AAnBY,yBAAiB,oBAmB7B,CAAA","file":"../../../../modules/feature modules/controllers/module-permissions.js","sourcesContent":["import ModulePermissionService = require('../services/module-permission-service');\r\nimport GroupMemberService = require('../../users/services/group-member-service');\r\nimport token_auth = require('../../JWT_Checker/loginToken.js');\r\nimport { GroupMemberInstance } from '../../users/models/group-member-model';\r\n\r\nexport class ModulePermissions {\r\n    public finalResponse = new Array<any>();\r\n    public groupMemberService = new GroupMemberService\r\n    public modulePermissionService = new ModulePermissionService\r\n\r\n    public getPermissions(userID): Promise<any> {\r\n        let groups = new Array<number>();\r\n        let promise = new Promise((resolve, reject) => {\r\n            this.groupMemberService.getByUser(userID).then((result) => {\r\n                for (let i=0; i<result.length; i++) {\r\n                    groups.push(result[i].groupID)\r\n                }\r\n                this.modulePermissionService.getByUserAndGroup(userID, groups).then((final) => {\r\n                    resolve(final)\r\n                })\r\n            })\r\n        })\r\n        return promise\r\n    }\r\n}"]}