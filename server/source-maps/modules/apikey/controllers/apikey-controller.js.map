{"version":3,"sources":["modules/apikey/controllers/apikey-controller.ts"],"names":[],"mappings":"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","file":"../../../../modules/apikey/controllers/apikey-controller.js","sourcesContent":["import APIKeyService = require('../services/apikey-service');\r\nimport APIKeyModel = require('../models/apikey-model');\r\n// import sequalizeModel = require(\"../models/user-model\");\r\n// import Sequelize = require('sequelize');\r\nimport token_auth = require('../../JWT_Checker/loginToken')\r\n// import GroupMemberModel = require('../models/group-member-model')\r\n// import {environment} from '../../../core/environment'\r\n\r\nvar express = require('express');\r\n// var jwt = require('jsonwebtoken');\r\n// var bcrypt = require('bcrypt');\r\nvar router = express.Router();\r\nvar service = new APIKeyService();\r\n\r\nrouter.get('/test', (req, res) => {\r\n    res.send('Test Passed')\r\n})\r\n\r\nrouter.get('/list', token_auth, (req, res) => {\r\n    service.getList(req.query.searchValue).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n    \r\n});\r\n\r\n// router.get('/single', token_auth, (req, res) => {\r\n//     var UserID = <number>req.query.userid;\r\n//     service.get(UserID).then((result) => {\r\n//         res.send(result);\r\n//     }).catch((error) => {\r\n//         res.send(error);\r\n//     });\r\n// });\r\n\r\n// //1/3/18: Robust way to do /create and /login\r\n// router.post('/single', token_auth, (req, res) => {\r\n//     var request = <App.User>req.body;\r\n//     UserModel.Model.findAll({\r\n//         where: { email: request.email}\r\n//     }).then(user => {\r\n//         if(user.length >= 1) {\r\n//             return res.status(422).json({\r\n//                 message: \"User already exists.\"\r\n//             })\r\n//         } else {\r\n//             bcrypt.hash(request.password, 10, (err, hash) => {\r\n//                 if (err) {\r\n//                     return res.status(500).json({\r\n//                         error:err,\r\n//                         message:\"Hash failed.\"\r\n//                     })\r\n//                 } else {\r\n//                     request.password = hash\r\n//                     service.create(request)\r\n//                     .then(result => {\r\n//                         res.status(201).json({\r\n//                             message: \"User created.\"\r\n//                         })\r\n//                     }).catch(err => {\r\n//                         res.status(500).json({\r\n//                             error:err,\r\n//                             message:\"User could not be created. Check email to ensure it is in the correct format.\"\r\n//                         })\r\n//                     });\r\n//                 }\r\n//             })\r\n//         }\r\n//     }).catch(err => {\r\n//         res.status(500).json({\r\n//             message:\"Model could not be created.\",\r\n//             error:err\r\n//         })\r\n//     })\r\n// });\r\n\r\n// router.put('/updatePassword', token_auth, (req, res) => {\r\n//     bcrypt.compare(req.body.oldPassword, req.body.password, (err, result) => {\r\n//         if(err) { //bcrypt hashing error\r\n//             return res.status(500).json({\r\n//                 message: 'bcrypt hash comparison failure. Try again in a few minutes.'\r\n//             })\r\n//         } else if(result) {\r\n//             bcrypt.hash(req.body.newPassword, 10, (err, hash) => {\r\n//                 if(err) {\r\n//                     return res.status(500).json({\r\n//                         error:err,\r\n//                         message:\"Hash failed.\"\r\n//                     })\r\n//                 } else {\r\n//                     req.body.password = hash\r\n//                     req.body.currUser.password = hash\r\n//                     service.update(<App.User>req.body.currUser)\r\n//                     .then(result => {\r\n//                         res.status(204).json({\r\n//                             message: \"Hash compare successful. Password updated.\",\r\n//                             user: req.body.currUser\r\n//                         })\r\n//                     }).catch(err => {\r\n//                         res.status(500).json({\r\n//                             error:err,\r\n//                             message:\"Password could not be changed.\"\r\n//                         })\r\n//                     })\r\n//                 }\r\n//             })          \r\n//         } else if(!result) {\r\n//             return res.status(401).json({\r\n//                 message: 'Authorization failed.'\r\n//             })\r\n//         }\r\n//     })\r\n// })\r\n\r\n// router.post('/login', (req, res) => {\r\n//     UserModel.Model.findAll({\r\n//         where: {email: req.body.email}\r\n//     }).then(user => {\r\n//         if(user.length < 1) { //If supplied email is not found as a user in the database\r\n//             return res.status(404).json({\r\n//                 message: 'User not found.'\r\n//             })\r\n//         }\r\n//         bcrypt.compare(req.body.password, user[0].password, (err, result) => {\r\n//             if(err) { //bcrypt hashing error\r\n//                 return res.status(500).json({\r\n//                     message: 'bcrypt hash comparison failure. Try again in a few minutes.'\r\n//                 })\r\n//             } else if(result) { //If input pw hash matches db pw hash\r\n//                 const login_token = jwt.sign(\r\n//                     {\r\n//                         email: user[0].email,\r\n//                         ID: user[0].ID\r\n//                     }, \r\n//                     environment.JWT_SECRET_KEY,\r\n//                     {\r\n//                         expiresIn: \"30 days\"\r\n//                         //expiresIn: \"10s\" //testing\r\n//                     }\r\n//                 );\r\n//                 return res.status(200).json({\r\n//                     message: \"Token granted.\",\r\n//                     token: login_token,\r\n//                     userID: user[0].ID,\r\n//                     admin: user[0].administrator,\r\n//                     firstName: user[0].firstName,\r\n//                     lastName: user[0].lastName\r\n//                 });\r\n//             } else if(!result) { //If hash comparison does not match\r\n//                 return res.status(401).json({\r\n//                     message: 'Authorization failed.'\r\n//                 })\r\n//             }\r\n//         })   \r\n//     }).catch(err => {\r\n//         return res.status(500).json({\r\n//             error:err\r\n//         })\r\n//     });\r\n// });\r\n\r\n// This request generates an API key (JWT) to be used for Google Earth KML files and such. Not to be confused with login \"session\" JWT above.\r\nrouter.post('/generatekey', token_auth, (req, res) => {\r\n    console.log('In Generate Key')\r\n    let userID: number = req.body.userID\r\n    var d = new Date().getTime();\r\n    var apikey: string\r\n    var request = <App.APIKey>req.body;\r\n    var uuid = 'xxxxxxxx-xxxx'.replace(/[xy]/g, function(c)\r\n\t{\r\n\t\tvar r = (d + Math.random()*16)%16 | 0;\r\n\t\td = Math.floor(d/16);\r\n\t\treturn (c=='x' ? r : (r&0x3|0x8)).toString(16);\r\n    });\r\n    console.log(uuid)\r\n    request.apikey = uuid\r\n    request.userID = req.body.userID\r\n    service.create(request).then((x) => {\r\n        res.send(x)\r\n    })\r\n\r\n})\r\n\r\n// router.put('/update', token_auth, (req, res) => {\r\n//     var request = <App.User>req.body;\r\n\r\n//     service.update(request).then((result) => {\r\n//         res.send(result);\r\n//     }).catch((error) => {\r\n//         res.send(error);\r\n//     });\r\n\r\n// });\r\n\r\nrouter.delete('/delete', token_auth, (req, res) => {\r\n    var ID = <number>req.query.ID;\r\n\r\n    service.delete(ID).then((result) => {\r\n        res.send(result);\r\n    }).catch((error) => {\r\n        res.send(error);\r\n    });\r\n\r\n});\r\n\r\nexport = router;"]}