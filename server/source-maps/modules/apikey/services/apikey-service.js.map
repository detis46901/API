{"version":3,"sources":["modules/apikey/services/apikey-service.ts"],"names":[],"mappings":";AAAA,IAAO,SAAS,WAAW,WAAW,CAAC,CAAC;AACxC,IAAO,WAAW,WAAW,wBAAwB,CAAC,CAAC;AACvD,IAAO,WAAW,WAAW,kCAAkC,CAAC,CAAA;AAEhE,yDAAyD;AAEzD;IAAA;IAkDA,CAAC;IAhDG,+BAAO,GAAP,UAAQ,WAAmB;QACvB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,QAAQ;aACX;SACJ,CAAC;QACF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,WAAW,CAAC,KAAK,GAAG;gBAChB,GAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,GAAE;oBACf,EAAE,MAAM,EAAE,UAAE,GAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,GAAE,KAAG,WAAa,KAAE,EAAE;iBACtD;;aACJ,CAAA;QACL,CAAC;QACD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;;IAClD,CAAC;IAED,2BAAG,GAAH,UAAI,KAAa;QACb,IAAI,WAAW,GAA0B,EAAG,CAAC;QAC7C,WAAW,CAAC,OAAO,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;QACzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IAC1D,CAAC;IAED,8BAAM,GAAN,UAAO,OAAmB;QACtB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QACpB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED,qEAAqE;IACrE,mFAAmF;IAEnF,sDAAsD;IACtD,oDAAoD;IACpD,8CAA8C;IAC9C,gDAAgD;IAChD,8DAA8D;IAC9D,kCAAkC;IAClC,wDAAwD;IACxD,YAAY;IAEZ,sCAAsC;IACtC,WAAW;IACX,IAAI;IAEJ,8BAAM,GAAN,UAAO,EAAU;QACb,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,cAAc;YACtD,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;IACP,CAAC;IACL,oBAAC;AAAD,CAlDA,AAkDC,IAAA;AAED,iBAAS,aAAa,CAAC","file":"../../../../modules/apikey/services/apikey-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport APIKeyModel = require('../models/apikey-model');\r\nimport DomainModel = require('../../domain/models/domain-model')\r\nimport bcrypt = require('bcrypt');\r\n//import ParentService = require('../../parent-service');\r\n\r\nclass APIKeyService {\r\n    \r\n    getList(searchValue: string): Promise<APIKeyModel.APIKeyInstance[]> {\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'apikey'\r\n            ]\r\n        };\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                [Sequelize.Op.or]: [\r\n                    { apikey: { [Sequelize.Op.eq]: `${searchValue}` } },\r\n                ]\r\n            }\r\n        }\r\n        return APIKeyModel.Model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<APIKeyModel.APIKeyInstance> {\r\n        var findOptions: Sequelize.FindOptions = { };\r\n        findOptions.include = [DomainModel.Model]\r\n        return APIKeyModel.Model.findByPk(rowID, findOptions);\r\n    }\r\n\r\n    create(request: App.APIKey): Promise<APIKeyModel.APIKeyInstance> {\r\n        console.log(request)\r\n        return APIKeyModel.Model.create(request);\r\n    }\r\n\r\n    // update(request: App.APIKey): Promise<APIKeyModel.APIKeyInstance> {\r\n    //     return <any>(APIKeyModel.Model.findByPk(request.ID).then((UserInstance) => {\r\n\r\n    //         UserInstance.firstName = request.firstName;\r\n    //         UserInstance.lastName = request.lastName;\r\n    //         UserInstance.email = request.email;\r\n    //         UserInstance.active = request.active;\r\n    //         UserInstance.administrator = request.administrator;\r\n    //         if (request.password) {\r\n    //             UserInstance.password = request.password;\r\n    //         }\r\n\r\n    //         return UserInstance.save();\r\n    //     }));\r\n    // }\r\n\r\n    delete(ID: number) {\r\n        return APIKeyModel.Model.findByPk(ID).then((APIKeyInstance) => {\r\n            return APIKeyInstance.destroy();\r\n        });\r\n    }\r\n}\r\n\r\nexport = APIKeyService;"]}