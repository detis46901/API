{"version":3,"sources":["modules/routes22/services/group-service.ts"],"names":[],"mappings":";AAAA,IAAO,SAAS,WAAW,WAAW,CAAC,CAAC;AACxC,IAAO,UAAU,WAAW,uBAAuB,CAAC,CAAC;AAErD;IAAA;IAmDA,CAAC;IAjDG,8BAAO,GAAP,UAAQ,WAAmB;QAEvB,IAAI,WAAW,GAA0B;YACrC,KAAK,EAAE;gBACH,MAAM;aACT;SACJ,CAAC;QAEF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,WAAW,CAAC,KAAK,GAAG;gBAChB,GAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,GAAE;oBACf,EAAE,SAAS,EAAE,UAAE,GAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,GAAE,MAAI,WAAW,MAAG,KAAE,EAAE;oBAC3D,EAAE,QAAQ,EAAE,UAAE,GAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,GAAE,MAAI,WAAW,MAAG,KAAE,EAAE;oBAC1D,EAAE,KAAK,EAAE,UAAE,GAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,GAAE,MAAI,WAAW,MAAG,KAAE,EAAE;iBAC1D;;aACJ,CAAA;QACL,CAAC;QAED,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;;IACjD,CAAC;IAED,0BAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,6BAAM,GAAN,UAAO,OAAkB;QACrB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED,6BAAM,GAAN,UAAO,OAAkB;QAErB,MAAM,CAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,aAAa;YAElE,aAAa,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YAClC,aAAa,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YAEhD,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,6BAAM,GAAN,UAAO,KAAa;QAEhB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,aAAa;YAEvD,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAEnC,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,mBAAC;AAAD,CAnDA,AAmDC,IAAA;AAED,iBAAS,YAAY,CAAC","file":"../../../../modules/routes22/services/group-service.js","sourcesContent":["import Sequelize = require('sequelize');\r\nimport GroupModel = require('../models/group-model');\r\n\r\nclass GroupService {\r\n\r\n    getList(searchValue: string): Promise<GroupModel.GroupInstance[]> {\r\n\r\n        var findOptions: Sequelize.FindOptions = {\r\n            order: [\r\n                'name'\r\n            ]\r\n        };\r\n\r\n        if (searchValue) {\r\n            findOptions.where = {\r\n                [Sequelize.Op.or]: [\r\n                    { firstName: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n                    { lastName: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n                    { email: { [Sequelize.Op.iLike]: `%${searchValue}%` } },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return GroupModel.model.findAll(findOptions);\r\n    }\r\n\r\n    get(rowID: number): Promise<GroupModel.GroupInstance> {\r\n        return GroupModel.model.findByPk(rowID);\r\n    }\r\n\r\n    create(request: App.Group): Promise<GroupModel.GroupInstance> {\r\n        return GroupModel.model.create(request);\r\n    }\r\n\r\n    update(request: App.Group): Promise<GroupModel.GroupInstance> {\r\n        \r\n        return <any>(GroupModel.model.findByPk(request.ID).then((GroupInstance) => {\r\n\r\n            GroupInstance.name = request.name;\r\n            GroupInstance.description = request.description;\r\n\r\n            return GroupInstance.save();\r\n        }));\r\n    }\r\n\r\n    delete(rowID: number) {\r\n\r\n        return GroupModel.model.findByPk(rowID).then((GroupInstance) => {\r\n\r\n            return GroupInstance.destroy();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport = GroupService;"]}