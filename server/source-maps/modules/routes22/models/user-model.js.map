{"version":3,"sources":["modules/routes22/models/user-model.ts"],"names":[],"mappings":";AAAA,IAAO,YAAY,WAAW,6BAA6B,CAAC,CAAC;AAC7D,0BAAiC,WAAW,CAAC,CAAA;AAG7C,IAAI,EAAE,GAAG,YAAY,EAAE,CAAC;AACxB,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAK/B,IAAI,cAAc,GAAG,EAAE,CAAC,MAAM,CAAyB,MAAM,EAAO;IAChE,EAAE,EAAE,EAAE,IAAI,EAAE,qBAAS,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE;IACtE,SAAS,EAAE;QACP,IAAI,EAAE,qBAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;SACf;KACJ;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,qBAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;SACf;KACJ;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,qBAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;SAChB;KACJ;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,qBAAS,CAAC,OAAO;QACvB,QAAQ,EAAE;YACN,EAAE,EAAE,CAAC,OAAO,EAAC,GAAG,CAAC,CAAC,qFAAqF;SAC1G;KACJ;IACD,KAAK,EAAE;QACH,IAAI,EAAE,qBAAS,CAAC,MAAM;QACtB,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE;YACN,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;YACb,OAAO,EAAE,IAAI;SAChB;KACJ;IACD,aAAa,EAAE;QACX,IAAI,EAAE,qBAAS,CAAC,OAAO;QACvB,QAAQ,EAAE;YACN,EAAE,EAAE,CAAC,OAAO,EAAC,GAAG,CAAC,CAAC,WAAW;SAChC;KACJ;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,qBAAS,CAAC,OAAO;QACvB,QAAQ,EAAE;YACN,EAAE,EAAE,CAAC,OAAO,EAAC,GAAG,CAAC,CAAC,WAAW;SAChC;KACJ;CACJ,CAAC,CAAC;AAEH,cAAc,CAAC,IAAI,EAAE,CAAA;AAErB,cAAc,CAAC,OAAO,CAAC,EACtB,CAAC,CAAC,IAAI,CAAC,UAAS,MAAM;IACnB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC;QAChB,IAAI,EAAE,CAAC;QACP,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,UAAC,GAAG,EAAE,IAAI;YAC/B,EAAE,GAAG,IAAI,CAAA;YACT,cAAc,CAAC,MAAM,CAAC;gBAClB,SAAS,EAAE,SAAS;gBACpB,QAAQ,EAAE,eAAe;gBACzB,QAAQ,EAAE,EAAE;gBACZ,MAAM,EAAE,KAAK;gBACb,KAAK,EAAE,yBAAyB;gBAChC,aAAa,EAAE,IAAI;aACtB,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;AACD,CAAC,CAAC,CAAC;AAEQ,aAAK,GAAG,cAAc,CAAC","file":"../../../../modules/routes22/models/user-model.js","sourcesContent":["import dbConnection = require('../../../core/db-connection');\r\nimport { Model, DataTypes } from \"sequelize\";\r\nimport GroupMemberModel = require('./group-member-model');\r\n\r\nvar db = dbConnection();\r\nvar bcrypt = require('bcrypt');\r\n\r\nexport interface UserInstance extends Model<UserInstance, App.User>, App.User { }\r\nexport interface UserModel extends Model<UserInstance, App.User> { }\r\n\r\nvar sequalizeModel = db.define<UserInstance, App.User>('user', <any>{\r\n    ID: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },\r\n    firstName: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n            len: [2, 30]\r\n        }\r\n    },\r\n    lastName: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n            len: [2, 30]\r\n        }\r\n    },\r\n    password: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n            len: [1, 200]\r\n        }\r\n    }, \r\n    active: {\r\n        type: DataTypes.BOOLEAN,\r\n        validate: {\r\n            is: [\"[a-z]\",'i'] //only allow letters //1/3/18 why is this here? letter validation for a boolean type?\r\n        }\r\n    },\r\n    email: { //consider adding isEmail: true when this is ready for deployment\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n        required: true,\r\n        unique: true,\r\n        validate: {\r\n            len: [1, 200],\r\n            isEmail: true\r\n        }\r\n    },\r\n    administrator: {\r\n        type: DataTypes.BOOLEAN,\r\n        validate: {\r\n            is: [\"[a-z]\",'i'] //1/3/18^^^\r\n        }\r\n    },\r\n    public: {\r\n        type: DataTypes.BOOLEAN,\r\n        validate: {\r\n            is: [\"[a-z]\",'i'] //1/3/18^^^\r\n        }\r\n    }\r\n});\r\n\r\nsequalizeModel.sync() \r\n\r\nsequalizeModel.findAll({\r\n}).then(function(result) {\r\n    if (!result[0]){\r\n    var pw;\r\n    bcrypt.hash(\"admin\", 10, (err, hash) => {\r\n        pw = hash\r\n        sequalizeModel.create({\r\n            firstName: 'Generic',\r\n            lastName: 'Administrator',\r\n            password: pw,\r\n            active: false,\r\n            email: 'administrator@gmail.com',\r\n            administrator: true\r\n        })\r\n    })\r\n}\r\n});\r\n\r\nexport var model = sequalizeModel;"]}