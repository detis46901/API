{"version":3,"sources":["chat-server.ts"],"names":[],"mappings":";AAAA,qBAAqC,MAAM,CAAC,CAAA;AAC5C,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,QAAQ,WAAM,WAAW,CAAC,CAAA;AAEtC;IAOI;QACI,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEO,8BAAS,GAAjB;QACI,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;IACzB,CAAC;IAEO,iCAAY,GAApB;QACI,IAAI,CAAC,MAAM,GAAG,mBAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC;IAEO,2BAAM,GAAd;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IACpB,CAAC;IAEO,4BAAO,GAAf;QACI,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAEO,2BAAM,GAAd;QAAA,iBAgBC;QAfG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE;YAC1B,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,MAAW;YAC9B,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,CAAM;gBACxB,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC;gBACxC,KAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE;gBACpB,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,2BAAM,GAAb;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IACL,iBAAC;AAAD,CApDA,AAoDC,IAAA;AApDY,kBAAU,aAoDtB,CAAA","file":"../chat-server.js","sourcesContent":["import { createServer, Server } from 'http';\r\nimport * as express from 'express';\r\nimport * as socketIo from 'socket.io';\r\n\r\nexport class ChatServer {\r\n    //public static readonly PORT:number = 8080;\r\n    private app: express.Application;\r\n    private server: Server;\r\n    private io: SocketIO.Server;\r\n    private port: string | number;\r\n\r\n    constructor() {\r\n        this.createApp();\r\n        this.config();\r\n        this.createServer();\r\n        this.sockets();\r\n        this.listen();\r\n    }\r\n\r\n    private createApp(): void {\r\n        this.app = express();\r\n    }\r\n\r\n    private createServer(): void {\r\n        this.server = createServer(this.app);\r\n    }\r\n\r\n    private config(): void {\r\n        this.port = 5001\r\n    }\r\n\r\n    private sockets(): void {\r\n        this.io = socketIo(this.server);\r\n    }\r\n\r\n    private listen(): void {\r\n        this.server.listen(this.port, () => {\r\n            console.log('Running server on port %s', this.port);\r\n        });\r\n\r\n        this.io.on('connect', (socket: any) => {\r\n            console.log('Connected client on port %s.', this.port);\r\n            socket.on('message', (m: any) => {\r\n                console.log('[server](message): %s', m);\r\n                this.io.emit('message', m);\r\n            });\r\n\r\n            socket.on('disconnect', () => {\r\n                console.log('Client disconnected');\r\n            });\r\n        });\r\n    }\r\n\r\n    public getApp(): express.Application {\r\n        return this.app;\r\n    }\r\n}\r\n"]}